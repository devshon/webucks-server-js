
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Categories
 * 
 */
export type Categories = {
  id: number
  name: string
  created_at: Date | null
}

/**
 * Model Products
 * 
 */
export type Products = {
  id: number
  korean_name: string
  english_name: string | null
  category_id: number
  created_at: Date | null
}

/**
 * Model ProductsImages
 * 
 */
export type ProductsImages = {
  id: number
  image_url: string
  product_id: number
  created_at: Date | null
}

/**
 * Model Allergies
 * 
 */
export type Allergies = {
  id: number
  name: string
  created_at: Date | null
}

/**
 * Model ProductsAllergies
 * 
 */
export type ProductsAllergies = {
  id: number
  product_id: number
  allergy_id: number
  created_at: Date | null
}

/**
 * Model Nutritions
 * 
 */
export type Nutritions = {
  id: number
  product_id: number
  caffein: number
  fat: number
  sugar: number
  sodium: number
  created_at: Date | null
}

/**
 * Model Users
 * 
 */
export type Users = {
  id: number
  email: string
  password: string
  username: string | null
  address: string | null
  phone_number: string | null
  policy_agreed: boolean
  created_at: Date | null
}

/**
 * Model ProductsLikes
 * 
 */
export type ProductsLikes = {
  id: number
  product_id: number
  user_id: number
  created_at: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.categories.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.categories.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.categories`: Exposes CRUD operations for the **Categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.CategoriesDelegate<GlobalReject>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **Products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.ProductsDelegate<GlobalReject>;

  /**
   * `prisma.productsImages`: Exposes CRUD operations for the **ProductsImages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductsImages
    * const productsImages = await prisma.productsImages.findMany()
    * ```
    */
  get productsImages(): Prisma.ProductsImagesDelegate<GlobalReject>;

  /**
   * `prisma.allergies`: Exposes CRUD operations for the **Allergies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allergies
    * const allergies = await prisma.allergies.findMany()
    * ```
    */
  get allergies(): Prisma.AllergiesDelegate<GlobalReject>;

  /**
   * `prisma.productsAllergies`: Exposes CRUD operations for the **ProductsAllergies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductsAllergies
    * const productsAllergies = await prisma.productsAllergies.findMany()
    * ```
    */
  get productsAllergies(): Prisma.ProductsAllergiesDelegate<GlobalReject>;

  /**
   * `prisma.nutritions`: Exposes CRUD operations for the **Nutritions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nutritions
    * const nutritions = await prisma.nutritions.findMany()
    * ```
    */
  get nutritions(): Prisma.NutritionsDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.productsLikes`: Exposes CRUD operations for the **ProductsLikes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductsLikes
    * const productsLikes = await prisma.productsLikes.findMany()
    * ```
    */
  get productsLikes(): Prisma.ProductsLikesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Categories: 'Categories',
    Products: 'Products',
    ProductsImages: 'ProductsImages',
    Allergies: 'Allergies',
    ProductsAllergies: 'ProductsAllergies',
    Nutritions: 'Nutritions',
    Users: 'Users',
    ProductsLikes: 'ProductsLikes'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoriesCountOutputType
   */


  export type CategoriesCountOutputType = {
    Products: number
  }

  export type CategoriesCountOutputTypeSelect = {
    Products?: boolean
  }

  export type CategoriesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoriesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoriesCountOutputType
    : S extends undefined
    ? never
    : S extends CategoriesCountOutputTypeArgs
    ?'include' extends U
    ? CategoriesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoriesCountOutputType ? CategoriesCountOutputType[P] : never
  } 
    : CategoriesCountOutputType
  : CategoriesCountOutputType




  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     * 
    **/
    select?: CategoriesCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductsCountOutputType
   */


  export type ProductsCountOutputType = {
    ProductsImages: number
    ProductsAllergies: number
    ProductsLikes: number
  }

  export type ProductsCountOutputTypeSelect = {
    ProductsImages?: boolean
    ProductsAllergies?: boolean
    ProductsLikes?: boolean
  }

  export type ProductsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProductsCountOutputType
    : S extends undefined
    ? never
    : S extends ProductsCountOutputTypeArgs
    ?'include' extends U
    ? ProductsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProductsCountOutputType ? ProductsCountOutputType[P] : never
  } 
    : ProductsCountOutputType
  : ProductsCountOutputType




  // Custom InputTypes

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     * 
    **/
    select?: ProductsCountOutputTypeSelect | null
  }



  /**
   * Count Type AllergiesCountOutputType
   */


  export type AllergiesCountOutputType = {
    ProductsAllergies: number
  }

  export type AllergiesCountOutputTypeSelect = {
    ProductsAllergies?: boolean
  }

  export type AllergiesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AllergiesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AllergiesCountOutputType
    : S extends undefined
    ? never
    : S extends AllergiesCountOutputTypeArgs
    ?'include' extends U
    ? AllergiesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AllergiesCountOutputType ? AllergiesCountOutputType[P] : never
  } 
    : AllergiesCountOutputType
  : AllergiesCountOutputType




  // Custom InputTypes

  /**
   * AllergiesCountOutputType without action
   */
  export type AllergiesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AllergiesCountOutputType
     * 
    **/
    select?: AllergiesCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    ProductsLikes: number
  }

  export type UsersCountOutputTypeSelect = {
    ProductsLikes?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Categories
   */


  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    _all?: true
  }

  export type CategoriesAggregateArgs = {
    /**
     * Filter which Categories to aggregate.
     * 
    **/
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type CategoriesGroupByArgs = {
    where?: CategoriesWhereInput
    orderBy?: Enumerable<CategoriesOrderByWithAggregationInput>
    by: Array<CategoriesScalarFieldEnum>
    having?: CategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }


  export type CategoriesGroupByOutputType = {
    id: number
    name: string
    created_at: Date | null
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type CategoriesSelect = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    Products?: boolean | ProductsFindManyArgs
    _count?: boolean | CategoriesCountOutputTypeArgs
  }

  export type CategoriesInclude = {
    Products?: boolean | ProductsFindManyArgs
    _count?: boolean | CategoriesCountOutputTypeArgs
  }

  export type CategoriesGetPayload<
    S extends boolean | null | undefined | CategoriesArgs,
    U = keyof S
      > = S extends true
        ? Categories
    : S extends undefined
    ? never
    : S extends CategoriesArgs | CategoriesFindManyArgs
    ?'include' extends U
    ? Categories  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Products' ? Array < ProductsGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoriesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Products' ? Array < ProductsGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoriesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Categories ? Categories[P] : never
  } 
    : Categories
  : Categories


  type CategoriesCountArgs = Merge<
    Omit<CategoriesFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesCountAggregateInputType | true
    }
  >

  export interface CategoriesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Categories that matches the filter.
     * @param {CategoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoriesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Categories'> extends True ? CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesClient<Categories | null >, Prisma__CategoriesClient<CategoriesGetPayload<T> | null >>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoriesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Categories'> extends True ? CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesClient<Categories | null >, Prisma__CategoriesClient<CategoriesGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriesFindManyArgs>(
      args?: SelectSubset<T, CategoriesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Categories>>, PrismaPromise<Array<CategoriesGetPayload<T>>>>

    /**
     * Create a Categories.
     * @param {CategoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends CategoriesCreateArgs>(
      args: SelectSubset<T, CategoriesCreateArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriesCreateManyArgs>(
      args?: SelectSubset<T, CategoriesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {CategoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends CategoriesDeleteArgs>(
      args: SelectSubset<T, CategoriesDeleteArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Update one Categories.
     * @param {CategoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriesUpdateArgs>(
      args: SelectSubset<T, CategoriesUpdateArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriesDeleteManyArgs>(
      args?: SelectSubset<T, CategoriesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriesUpdateManyArgs>(
      args: SelectSubset<T, CategoriesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {CategoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriesUpsertArgs>(
      args: SelectSubset<T, CategoriesUpsertArgs>
    ): CheckSelect<T, Prisma__CategoriesClient<Categories>, Prisma__CategoriesClient<CategoriesGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoriesCountArgs>(
      args?: Subset<T, CategoriesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoriesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Products<T extends ProductsFindManyArgs = {}>(args?: Subset<T, ProductsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Products>>, PrismaPromise<Array<ProductsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Categories findUnique
   */
  export type CategoriesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * Throw an Error if a Categories can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories findFirst
   */
  export type CategoriesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * Throw an Error if a Categories can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * Categories findMany
   */
  export type CategoriesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoriesScalarFieldEnum>
  }


  /**
   * Categories create
   */
  export type CategoriesCreateArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * The data needed to create a Categories.
     * 
    **/
    data: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
  }


  /**
   * Categories createMany
   */
  export type CategoriesCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Categories update
   */
  export type CategoriesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * The data needed to update a Categories.
     * 
    **/
    data: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
    /**
     * Choose, which Categories to update.
     * 
    **/
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories updateMany
   */
  export type CategoriesUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoriesUpdateManyMutationInput, CategoriesUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoriesWhereInput
  }


  /**
   * Categories upsert
   */
  export type CategoriesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * The filter to search for the Categories to update in case it exists.
     * 
    **/
    where: CategoriesWhereUniqueInput
    /**
     * In case the Categories found by the `where` argument doesn't exist, create a new Categories with this data.
     * 
    **/
    create: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
    /**
     * In case the Categories was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
  }


  /**
   * Categories delete
   */
  export type CategoriesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
    /**
     * Filter which Categories to delete.
     * 
    **/
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories deleteMany
   */
  export type CategoriesDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoriesWhereInput
  }


  /**
   * Categories without action
   */
  export type CategoriesArgs = {
    /**
     * Select specific fields to fetch from the Categories
     * 
    **/
    select?: CategoriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesInclude | null
  }



  /**
   * Model Products
   */


  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    category_id: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    category_id: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    korean_name: string | null
    english_name: string | null
    category_id: number | null
    created_at: Date | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    korean_name: string | null
    english_name: string | null
    category_id: number | null
    created_at: Date | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    korean_name: number
    english_name: number
    category_id: number
    created_at: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    category_id?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    category_id?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    korean_name?: true
    english_name?: true
    category_id?: true
    created_at?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    korean_name?: true
    english_name?: true
    category_id?: true
    created_at?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    korean_name?: true
    english_name?: true
    category_id?: true
    created_at?: true
    _all?: true
  }

  export type ProductsAggregateArgs = {
    /**
     * Filter which Products to aggregate.
     * 
    **/
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type ProductsGroupByArgs = {
    where?: ProductsWhereInput
    orderBy?: Enumerable<ProductsOrderByWithAggregationInput>
    by: Array<ProductsScalarFieldEnum>
    having?: ProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }


  export type ProductsGroupByOutputType = {
    id: number
    korean_name: string
    english_name: string | null
    category_id: number
    created_at: Date | null
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends ProductsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type ProductsSelect = {
    id?: boolean
    korean_name?: boolean
    english_name?: boolean
    category_id?: boolean
    created_at?: boolean
    categories?: boolean | CategoriesArgs
    ProductsImages?: boolean | ProductsImagesFindManyArgs
    ProductsAllergies?: boolean | ProductsAllergiesFindManyArgs
    ProductsLikes?: boolean | ProductsLikesFindManyArgs
    Nutritions?: boolean | NutritionsArgs
    _count?: boolean | ProductsCountOutputTypeArgs
  }

  export type ProductsInclude = {
    categories?: boolean | CategoriesArgs
    ProductsImages?: boolean | ProductsImagesFindManyArgs
    ProductsAllergies?: boolean | ProductsAllergiesFindManyArgs
    ProductsLikes?: boolean | ProductsLikesFindManyArgs
    Nutritions?: boolean | NutritionsArgs
    _count?: boolean | ProductsCountOutputTypeArgs
  }

  export type ProductsGetPayload<
    S extends boolean | null | undefined | ProductsArgs,
    U = keyof S
      > = S extends true
        ? Products
    : S extends undefined
    ? never
    : S extends ProductsArgs | ProductsFindManyArgs
    ?'include' extends U
    ? Products  & {
    [P in TrueKeys<S['include']>]:
        P extends 'categories' ? CategoriesGetPayload<S['include'][P]> :
        P extends 'ProductsImages' ? Array < ProductsImagesGetPayload<S['include'][P]>>  :
        P extends 'ProductsAllergies' ? Array < ProductsAllergiesGetPayload<S['include'][P]>>  :
        P extends 'ProductsLikes' ? Array < ProductsLikesGetPayload<S['include'][P]>>  :
        P extends 'Nutritions' ? NutritionsGetPayload<S['include'][P]> | null :
        P extends '_count' ? ProductsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'categories' ? CategoriesGetPayload<S['select'][P]> :
        P extends 'ProductsImages' ? Array < ProductsImagesGetPayload<S['select'][P]>>  :
        P extends 'ProductsAllergies' ? Array < ProductsAllergiesGetPayload<S['select'][P]>>  :
        P extends 'ProductsLikes' ? Array < ProductsLikesGetPayload<S['select'][P]>>  :
        P extends 'Nutritions' ? NutritionsGetPayload<S['select'][P]> | null :
        P extends '_count' ? ProductsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Products ? Products[P] : never
  } 
    : Products
  : Products


  type ProductsCountArgs = Merge<
    Omit<ProductsFindManyArgs, 'select' | 'include'> & {
      select?: ProductsCountAggregateInputType | true
    }
  >

  export interface ProductsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Products that matches the filter.
     * @param {ProductsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Products'> extends True ? CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>> : CheckSelect<T, Prisma__ProductsClient<Products | null >, Prisma__ProductsClient<ProductsGetPayload<T> | null >>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Products'> extends True ? CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>> : CheckSelect<T, Prisma__ProductsClient<Products | null >, Prisma__ProductsClient<ProductsGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsFindManyArgs>(
      args?: SelectSubset<T, ProductsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Products>>, PrismaPromise<Array<ProductsGetPayload<T>>>>

    /**
     * Create a Products.
     * @param {ProductsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends ProductsCreateArgs>(
      args: SelectSubset<T, ProductsCreateArgs>
    ): CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {ProductsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductsCreateManyArgs>(
      args?: SelectSubset<T, ProductsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {ProductsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends ProductsDeleteArgs>(
      args: SelectSubset<T, ProductsDeleteArgs>
    ): CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>>

    /**
     * Update one Products.
     * @param {ProductsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsUpdateArgs>(
      args: SelectSubset<T, ProductsUpdateArgs>
    ): CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsDeleteManyArgs>(
      args?: SelectSubset<T, ProductsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsUpdateManyArgs>(
      args: SelectSubset<T, ProductsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {ProductsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsUpsertArgs>(
      args: SelectSubset<T, ProductsUpsertArgs>
    ): CheckSelect<T, Prisma__ProductsClient<Products>, Prisma__ProductsClient<ProductsGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductsCountArgs>(
      args?: Subset<T, ProductsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsGroupByArgs['orderBy'] }
        : { orderBy?: ProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categories<T extends CategoriesArgs = {}>(args?: Subset<T, CategoriesArgs>): CheckSelect<T, Prisma__CategoriesClient<Categories | null >, Prisma__CategoriesClient<CategoriesGetPayload<T> | null >>;

    ProductsImages<T extends ProductsImagesFindManyArgs = {}>(args?: Subset<T, ProductsImagesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ProductsImages>>, PrismaPromise<Array<ProductsImagesGetPayload<T>>>>;

    ProductsAllergies<T extends ProductsAllergiesFindManyArgs = {}>(args?: Subset<T, ProductsAllergiesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ProductsAllergies>>, PrismaPromise<Array<ProductsAllergiesGetPayload<T>>>>;

    ProductsLikes<T extends ProductsLikesFindManyArgs = {}>(args?: Subset<T, ProductsLikesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ProductsLikes>>, PrismaPromise<Array<ProductsLikesGetPayload<T>>>>;

    Nutritions<T extends NutritionsArgs = {}>(args?: Subset<T, NutritionsArgs>): CheckSelect<T, Prisma__NutritionsClient<Nutritions | null >, Prisma__NutritionsClient<NutritionsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Products findUnique
   */
  export type ProductsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * Throw an Error if a Products can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where: ProductsWhereUniqueInput
  }


  /**
   * Products findFirst
   */
  export type ProductsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * Throw an Error if a Products can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     * 
    **/
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     * 
    **/
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * Products findMany
   */
  export type ProductsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     * 
    **/
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductsScalarFieldEnum>
  }


  /**
   * Products create
   */
  export type ProductsCreateArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * The data needed to create a Products.
     * 
    **/
    data: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
  }


  /**
   * Products createMany
   */
  export type ProductsCreateManyArgs = {
    /**
     * The data used to create many Products.
     * 
    **/
    data: Enumerable<ProductsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Products update
   */
  export type ProductsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * The data needed to update a Products.
     * 
    **/
    data: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
    /**
     * Choose, which Products to update.
     * 
    **/
    where: ProductsWhereUniqueInput
  }


  /**
   * Products updateMany
   */
  export type ProductsUpdateManyArgs = {
    /**
     * The data used to update Products.
     * 
    **/
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     * 
    **/
    where?: ProductsWhereInput
  }


  /**
   * Products upsert
   */
  export type ProductsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * The filter to search for the Products to update in case it exists.
     * 
    **/
    where: ProductsWhereUniqueInput
    /**
     * In case the Products found by the `where` argument doesn't exist, create a new Products with this data.
     * 
    **/
    create: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
    /**
     * In case the Products was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
  }


  /**
   * Products delete
   */
  export type ProductsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
    /**
     * Filter which Products to delete.
     * 
    **/
    where: ProductsWhereUniqueInput
  }


  /**
   * Products deleteMany
   */
  export type ProductsDeleteManyArgs = {
    /**
     * Filter which Products to delete
     * 
    **/
    where?: ProductsWhereInput
  }


  /**
   * Products without action
   */
  export type ProductsArgs = {
    /**
     * Select specific fields to fetch from the Products
     * 
    **/
    select?: ProductsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsInclude | null
  }



  /**
   * Model ProductsImages
   */


  export type AggregateProductsImages = {
    _count: ProductsImagesCountAggregateOutputType | null
    _avg: ProductsImagesAvgAggregateOutputType | null
    _sum: ProductsImagesSumAggregateOutputType | null
    _min: ProductsImagesMinAggregateOutputType | null
    _max: ProductsImagesMaxAggregateOutputType | null
  }

  export type ProductsImagesAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type ProductsImagesSumAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type ProductsImagesMinAggregateOutputType = {
    id: number | null
    image_url: string | null
    product_id: number | null
    created_at: Date | null
  }

  export type ProductsImagesMaxAggregateOutputType = {
    id: number | null
    image_url: string | null
    product_id: number | null
    created_at: Date | null
  }

  export type ProductsImagesCountAggregateOutputType = {
    id: number
    image_url: number
    product_id: number
    created_at: number
    _all: number
  }


  export type ProductsImagesAvgAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type ProductsImagesSumAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type ProductsImagesMinAggregateInputType = {
    id?: true
    image_url?: true
    product_id?: true
    created_at?: true
  }

  export type ProductsImagesMaxAggregateInputType = {
    id?: true
    image_url?: true
    product_id?: true
    created_at?: true
  }

  export type ProductsImagesCountAggregateInputType = {
    id?: true
    image_url?: true
    product_id?: true
    created_at?: true
    _all?: true
  }

  export type ProductsImagesAggregateArgs = {
    /**
     * Filter which ProductsImages to aggregate.
     * 
    **/
    where?: ProductsImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsImagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductsImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsImages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductsImages
    **/
    _count?: true | ProductsImagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsImagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsImagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsImagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsImagesMaxAggregateInputType
  }

  export type GetProductsImagesAggregateType<T extends ProductsImagesAggregateArgs> = {
        [P in keyof T & keyof AggregateProductsImages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductsImages[P]>
      : GetScalarType<T[P], AggregateProductsImages[P]>
  }




  export type ProductsImagesGroupByArgs = {
    where?: ProductsImagesWhereInput
    orderBy?: Enumerable<ProductsImagesOrderByWithAggregationInput>
    by: Array<ProductsImagesScalarFieldEnum>
    having?: ProductsImagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsImagesCountAggregateInputType | true
    _avg?: ProductsImagesAvgAggregateInputType
    _sum?: ProductsImagesSumAggregateInputType
    _min?: ProductsImagesMinAggregateInputType
    _max?: ProductsImagesMaxAggregateInputType
  }


  export type ProductsImagesGroupByOutputType = {
    id: number
    image_url: string
    product_id: number
    created_at: Date | null
    _count: ProductsImagesCountAggregateOutputType | null
    _avg: ProductsImagesAvgAggregateOutputType | null
    _sum: ProductsImagesSumAggregateOutputType | null
    _min: ProductsImagesMinAggregateOutputType | null
    _max: ProductsImagesMaxAggregateOutputType | null
  }

  type GetProductsImagesGroupByPayload<T extends ProductsImagesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductsImagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsImagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsImagesGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsImagesGroupByOutputType[P]>
        }
      >
    >


  export type ProductsImagesSelect = {
    id?: boolean
    image_url?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | ProductsArgs
  }

  export type ProductsImagesInclude = {
    products?: boolean | ProductsArgs
  }

  export type ProductsImagesGetPayload<
    S extends boolean | null | undefined | ProductsImagesArgs,
    U = keyof S
      > = S extends true
        ? ProductsImages
    : S extends undefined
    ? never
    : S extends ProductsImagesArgs | ProductsImagesFindManyArgs
    ?'include' extends U
    ? ProductsImages  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? ProductsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? ProductsGetPayload<S['select'][P]> :  P extends keyof ProductsImages ? ProductsImages[P] : never
  } 
    : ProductsImages
  : ProductsImages


  type ProductsImagesCountArgs = Merge<
    Omit<ProductsImagesFindManyArgs, 'select' | 'include'> & {
      select?: ProductsImagesCountAggregateInputType | true
    }
  >

  export interface ProductsImagesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ProductsImages that matches the filter.
     * @param {ProductsImagesFindUniqueArgs} args - Arguments to find a ProductsImages
     * @example
     * // Get one ProductsImages
     * const productsImages = await prisma.productsImages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsImagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductsImagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProductsImages'> extends True ? CheckSelect<T, Prisma__ProductsImagesClient<ProductsImages>, Prisma__ProductsImagesClient<ProductsImagesGetPayload<T>>> : CheckSelect<T, Prisma__ProductsImagesClient<ProductsImages | null >, Prisma__ProductsImagesClient<ProductsImagesGetPayload<T> | null >>

    /**
     * Find the first ProductsImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsImagesFindFirstArgs} args - Arguments to find a ProductsImages
     * @example
     * // Get one ProductsImages
     * const productsImages = await prisma.productsImages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsImagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductsImagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProductsImages'> extends True ? CheckSelect<T, Prisma__ProductsImagesClient<ProductsImages>, Prisma__ProductsImagesClient<ProductsImagesGetPayload<T>>> : CheckSelect<T, Prisma__ProductsImagesClient<ProductsImages | null >, Prisma__ProductsImagesClient<ProductsImagesGetPayload<T> | null >>

    /**
     * Find zero or more ProductsImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsImagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductsImages
     * const productsImages = await prisma.productsImages.findMany()
     * 
     * // Get first 10 ProductsImages
     * const productsImages = await prisma.productsImages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsImagesWithIdOnly = await prisma.productsImages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsImagesFindManyArgs>(
      args?: SelectSubset<T, ProductsImagesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ProductsImages>>, PrismaPromise<Array<ProductsImagesGetPayload<T>>>>

    /**
     * Create a ProductsImages.
     * @param {ProductsImagesCreateArgs} args - Arguments to create a ProductsImages.
     * @example
     * // Create one ProductsImages
     * const ProductsImages = await prisma.productsImages.create({
     *   data: {
     *     // ... data to create a ProductsImages
     *   }
     * })
     * 
    **/
    create<T extends ProductsImagesCreateArgs>(
      args: SelectSubset<T, ProductsImagesCreateArgs>
    ): CheckSelect<T, Prisma__ProductsImagesClient<ProductsImages>, Prisma__ProductsImagesClient<ProductsImagesGetPayload<T>>>

    /**
     * Create many ProductsImages.
     *     @param {ProductsImagesCreateManyArgs} args - Arguments to create many ProductsImages.
     *     @example
     *     // Create many ProductsImages
     *     const productsImages = await prisma.productsImages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductsImagesCreateManyArgs>(
      args?: SelectSubset<T, ProductsImagesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ProductsImages.
     * @param {ProductsImagesDeleteArgs} args - Arguments to delete one ProductsImages.
     * @example
     * // Delete one ProductsImages
     * const ProductsImages = await prisma.productsImages.delete({
     *   where: {
     *     // ... filter to delete one ProductsImages
     *   }
     * })
     * 
    **/
    delete<T extends ProductsImagesDeleteArgs>(
      args: SelectSubset<T, ProductsImagesDeleteArgs>
    ): CheckSelect<T, Prisma__ProductsImagesClient<ProductsImages>, Prisma__ProductsImagesClient<ProductsImagesGetPayload<T>>>

    /**
     * Update one ProductsImages.
     * @param {ProductsImagesUpdateArgs} args - Arguments to update one ProductsImages.
     * @example
     * // Update one ProductsImages
     * const productsImages = await prisma.productsImages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsImagesUpdateArgs>(
      args: SelectSubset<T, ProductsImagesUpdateArgs>
    ): CheckSelect<T, Prisma__ProductsImagesClient<ProductsImages>, Prisma__ProductsImagesClient<ProductsImagesGetPayload<T>>>

    /**
     * Delete zero or more ProductsImages.
     * @param {ProductsImagesDeleteManyArgs} args - Arguments to filter ProductsImages to delete.
     * @example
     * // Delete a few ProductsImages
     * const { count } = await prisma.productsImages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsImagesDeleteManyArgs>(
      args?: SelectSubset<T, ProductsImagesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductsImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsImagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductsImages
     * const productsImages = await prisma.productsImages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsImagesUpdateManyArgs>(
      args: SelectSubset<T, ProductsImagesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductsImages.
     * @param {ProductsImagesUpsertArgs} args - Arguments to update or create a ProductsImages.
     * @example
     * // Update or create a ProductsImages
     * const productsImages = await prisma.productsImages.upsert({
     *   create: {
     *     // ... data to create a ProductsImages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductsImages we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsImagesUpsertArgs>(
      args: SelectSubset<T, ProductsImagesUpsertArgs>
    ): CheckSelect<T, Prisma__ProductsImagesClient<ProductsImages>, Prisma__ProductsImagesClient<ProductsImagesGetPayload<T>>>

    /**
     * Count the number of ProductsImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsImagesCountArgs} args - Arguments to filter ProductsImages to count.
     * @example
     * // Count the number of ProductsImages
     * const count = await prisma.productsImages.count({
     *   where: {
     *     // ... the filter for the ProductsImages we want to count
     *   }
     * })
    **/
    count<T extends ProductsImagesCountArgs>(
      args?: Subset<T, ProductsImagesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsImagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductsImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsImagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsImagesAggregateArgs>(args: Subset<T, ProductsImagesAggregateArgs>): PrismaPromise<GetProductsImagesAggregateType<T>>

    /**
     * Group by ProductsImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsImagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsImagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsImagesGroupByArgs['orderBy'] }
        : { orderBy?: ProductsImagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsImagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsImagesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductsImages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductsImagesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends ProductsArgs = {}>(args?: Subset<T, ProductsArgs>): CheckSelect<T, Prisma__ProductsClient<Products | null >, Prisma__ProductsClient<ProductsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ProductsImages findUnique
   */
  export type ProductsImagesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ProductsImages
     * 
    **/
    select?: ProductsImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsImagesInclude | null
    /**
     * Throw an Error if a ProductsImages can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProductsImages to fetch.
     * 
    **/
    where: ProductsImagesWhereUniqueInput
  }


  /**
   * ProductsImages findFirst
   */
  export type ProductsImagesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ProductsImages
     * 
    **/
    select?: ProductsImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsImagesInclude | null
    /**
     * Throw an Error if a ProductsImages can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProductsImages to fetch.
     * 
    **/
    where?: ProductsImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsImagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductsImages.
     * 
    **/
    cursor?: ProductsImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsImages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductsImages.
     * 
    **/
    distinct?: Enumerable<ProductsImagesScalarFieldEnum>
  }


  /**
   * ProductsImages findMany
   */
  export type ProductsImagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProductsImages
     * 
    **/
    select?: ProductsImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsImagesInclude | null
    /**
     * Filter, which ProductsImages to fetch.
     * 
    **/
    where?: ProductsImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsImages to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsImagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductsImages.
     * 
    **/
    cursor?: ProductsImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsImages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsImages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductsImagesScalarFieldEnum>
  }


  /**
   * ProductsImages create
   */
  export type ProductsImagesCreateArgs = {
    /**
     * Select specific fields to fetch from the ProductsImages
     * 
    **/
    select?: ProductsImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsImagesInclude | null
    /**
     * The data needed to create a ProductsImages.
     * 
    **/
    data: XOR<ProductsImagesCreateInput, ProductsImagesUncheckedCreateInput>
  }


  /**
   * ProductsImages createMany
   */
  export type ProductsImagesCreateManyArgs = {
    /**
     * The data used to create many ProductsImages.
     * 
    **/
    data: Enumerable<ProductsImagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProductsImages update
   */
  export type ProductsImagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProductsImages
     * 
    **/
    select?: ProductsImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsImagesInclude | null
    /**
     * The data needed to update a ProductsImages.
     * 
    **/
    data: XOR<ProductsImagesUpdateInput, ProductsImagesUncheckedUpdateInput>
    /**
     * Choose, which ProductsImages to update.
     * 
    **/
    where: ProductsImagesWhereUniqueInput
  }


  /**
   * ProductsImages updateMany
   */
  export type ProductsImagesUpdateManyArgs = {
    /**
     * The data used to update ProductsImages.
     * 
    **/
    data: XOR<ProductsImagesUpdateManyMutationInput, ProductsImagesUncheckedUpdateManyInput>
    /**
     * Filter which ProductsImages to update
     * 
    **/
    where?: ProductsImagesWhereInput
  }


  /**
   * ProductsImages upsert
   */
  export type ProductsImagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProductsImages
     * 
    **/
    select?: ProductsImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsImagesInclude | null
    /**
     * The filter to search for the ProductsImages to update in case it exists.
     * 
    **/
    where: ProductsImagesWhereUniqueInput
    /**
     * In case the ProductsImages found by the `where` argument doesn't exist, create a new ProductsImages with this data.
     * 
    **/
    create: XOR<ProductsImagesCreateInput, ProductsImagesUncheckedCreateInput>
    /**
     * In case the ProductsImages was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductsImagesUpdateInput, ProductsImagesUncheckedUpdateInput>
  }


  /**
   * ProductsImages delete
   */
  export type ProductsImagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProductsImages
     * 
    **/
    select?: ProductsImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsImagesInclude | null
    /**
     * Filter which ProductsImages to delete.
     * 
    **/
    where: ProductsImagesWhereUniqueInput
  }


  /**
   * ProductsImages deleteMany
   */
  export type ProductsImagesDeleteManyArgs = {
    /**
     * Filter which ProductsImages to delete
     * 
    **/
    where?: ProductsImagesWhereInput
  }


  /**
   * ProductsImages without action
   */
  export type ProductsImagesArgs = {
    /**
     * Select specific fields to fetch from the ProductsImages
     * 
    **/
    select?: ProductsImagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsImagesInclude | null
  }



  /**
   * Model Allergies
   */


  export type AggregateAllergies = {
    _count: AllergiesCountAggregateOutputType | null
    _avg: AllergiesAvgAggregateOutputType | null
    _sum: AllergiesSumAggregateOutputType | null
    _min: AllergiesMinAggregateOutputType | null
    _max: AllergiesMaxAggregateOutputType | null
  }

  export type AllergiesAvgAggregateOutputType = {
    id: number | null
  }

  export type AllergiesSumAggregateOutputType = {
    id: number | null
  }

  export type AllergiesMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type AllergiesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type AllergiesCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    _all: number
  }


  export type AllergiesAvgAggregateInputType = {
    id?: true
  }

  export type AllergiesSumAggregateInputType = {
    id?: true
  }

  export type AllergiesMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type AllergiesMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type AllergiesCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    _all?: true
  }

  export type AllergiesAggregateArgs = {
    /**
     * Filter which Allergies to aggregate.
     * 
    **/
    where?: AllergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<AllergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AllergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Allergies
    **/
    _count?: true | AllergiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllergiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllergiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllergiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllergiesMaxAggregateInputType
  }

  export type GetAllergiesAggregateType<T extends AllergiesAggregateArgs> = {
        [P in keyof T & keyof AggregateAllergies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllergies[P]>
      : GetScalarType<T[P], AggregateAllergies[P]>
  }




  export type AllergiesGroupByArgs = {
    where?: AllergiesWhereInput
    orderBy?: Enumerable<AllergiesOrderByWithAggregationInput>
    by: Array<AllergiesScalarFieldEnum>
    having?: AllergiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllergiesCountAggregateInputType | true
    _avg?: AllergiesAvgAggregateInputType
    _sum?: AllergiesSumAggregateInputType
    _min?: AllergiesMinAggregateInputType
    _max?: AllergiesMaxAggregateInputType
  }


  export type AllergiesGroupByOutputType = {
    id: number
    name: string
    created_at: Date | null
    _count: AllergiesCountAggregateOutputType | null
    _avg: AllergiesAvgAggregateOutputType | null
    _sum: AllergiesSumAggregateOutputType | null
    _min: AllergiesMinAggregateOutputType | null
    _max: AllergiesMaxAggregateOutputType | null
  }

  type GetAllergiesGroupByPayload<T extends AllergiesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AllergiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllergiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllergiesGroupByOutputType[P]>
            : GetScalarType<T[P], AllergiesGroupByOutputType[P]>
        }
      >
    >


  export type AllergiesSelect = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    ProductsAllergies?: boolean | ProductsAllergiesFindManyArgs
    _count?: boolean | AllergiesCountOutputTypeArgs
  }

  export type AllergiesInclude = {
    ProductsAllergies?: boolean | ProductsAllergiesFindManyArgs
    _count?: boolean | AllergiesCountOutputTypeArgs
  }

  export type AllergiesGetPayload<
    S extends boolean | null | undefined | AllergiesArgs,
    U = keyof S
      > = S extends true
        ? Allergies
    : S extends undefined
    ? never
    : S extends AllergiesArgs | AllergiesFindManyArgs
    ?'include' extends U
    ? Allergies  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ProductsAllergies' ? Array < ProductsAllergiesGetPayload<S['include'][P]>>  :
        P extends '_count' ? AllergiesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ProductsAllergies' ? Array < ProductsAllergiesGetPayload<S['select'][P]>>  :
        P extends '_count' ? AllergiesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Allergies ? Allergies[P] : never
  } 
    : Allergies
  : Allergies


  type AllergiesCountArgs = Merge<
    Omit<AllergiesFindManyArgs, 'select' | 'include'> & {
      select?: AllergiesCountAggregateInputType | true
    }
  >

  export interface AllergiesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Allergies that matches the filter.
     * @param {AllergiesFindUniqueArgs} args - Arguments to find a Allergies
     * @example
     * // Get one Allergies
     * const allergies = await prisma.allergies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AllergiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AllergiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Allergies'> extends True ? CheckSelect<T, Prisma__AllergiesClient<Allergies>, Prisma__AllergiesClient<AllergiesGetPayload<T>>> : CheckSelect<T, Prisma__AllergiesClient<Allergies | null >, Prisma__AllergiesClient<AllergiesGetPayload<T> | null >>

    /**
     * Find the first Allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesFindFirstArgs} args - Arguments to find a Allergies
     * @example
     * // Get one Allergies
     * const allergies = await prisma.allergies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AllergiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AllergiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Allergies'> extends True ? CheckSelect<T, Prisma__AllergiesClient<Allergies>, Prisma__AllergiesClient<AllergiesGetPayload<T>>> : CheckSelect<T, Prisma__AllergiesClient<Allergies | null >, Prisma__AllergiesClient<AllergiesGetPayload<T> | null >>

    /**
     * Find zero or more Allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allergies
     * const allergies = await prisma.allergies.findMany()
     * 
     * // Get first 10 Allergies
     * const allergies = await prisma.allergies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allergiesWithIdOnly = await prisma.allergies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AllergiesFindManyArgs>(
      args?: SelectSubset<T, AllergiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Allergies>>, PrismaPromise<Array<AllergiesGetPayload<T>>>>

    /**
     * Create a Allergies.
     * @param {AllergiesCreateArgs} args - Arguments to create a Allergies.
     * @example
     * // Create one Allergies
     * const Allergies = await prisma.allergies.create({
     *   data: {
     *     // ... data to create a Allergies
     *   }
     * })
     * 
    **/
    create<T extends AllergiesCreateArgs>(
      args: SelectSubset<T, AllergiesCreateArgs>
    ): CheckSelect<T, Prisma__AllergiesClient<Allergies>, Prisma__AllergiesClient<AllergiesGetPayload<T>>>

    /**
     * Create many Allergies.
     *     @param {AllergiesCreateManyArgs} args - Arguments to create many Allergies.
     *     @example
     *     // Create many Allergies
     *     const allergies = await prisma.allergies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AllergiesCreateManyArgs>(
      args?: SelectSubset<T, AllergiesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Allergies.
     * @param {AllergiesDeleteArgs} args - Arguments to delete one Allergies.
     * @example
     * // Delete one Allergies
     * const Allergies = await prisma.allergies.delete({
     *   where: {
     *     // ... filter to delete one Allergies
     *   }
     * })
     * 
    **/
    delete<T extends AllergiesDeleteArgs>(
      args: SelectSubset<T, AllergiesDeleteArgs>
    ): CheckSelect<T, Prisma__AllergiesClient<Allergies>, Prisma__AllergiesClient<AllergiesGetPayload<T>>>

    /**
     * Update one Allergies.
     * @param {AllergiesUpdateArgs} args - Arguments to update one Allergies.
     * @example
     * // Update one Allergies
     * const allergies = await prisma.allergies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AllergiesUpdateArgs>(
      args: SelectSubset<T, AllergiesUpdateArgs>
    ): CheckSelect<T, Prisma__AllergiesClient<Allergies>, Prisma__AllergiesClient<AllergiesGetPayload<T>>>

    /**
     * Delete zero or more Allergies.
     * @param {AllergiesDeleteManyArgs} args - Arguments to filter Allergies to delete.
     * @example
     * // Delete a few Allergies
     * const { count } = await prisma.allergies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AllergiesDeleteManyArgs>(
      args?: SelectSubset<T, AllergiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allergies
     * const allergies = await prisma.allergies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AllergiesUpdateManyArgs>(
      args: SelectSubset<T, AllergiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Allergies.
     * @param {AllergiesUpsertArgs} args - Arguments to update or create a Allergies.
     * @example
     * // Update or create a Allergies
     * const allergies = await prisma.allergies.upsert({
     *   create: {
     *     // ... data to create a Allergies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allergies we want to update
     *   }
     * })
    **/
    upsert<T extends AllergiesUpsertArgs>(
      args: SelectSubset<T, AllergiesUpsertArgs>
    ): CheckSelect<T, Prisma__AllergiesClient<Allergies>, Prisma__AllergiesClient<AllergiesGetPayload<T>>>

    /**
     * Count the number of Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesCountArgs} args - Arguments to filter Allergies to count.
     * @example
     * // Count the number of Allergies
     * const count = await prisma.allergies.count({
     *   where: {
     *     // ... the filter for the Allergies we want to count
     *   }
     * })
    **/
    count<T extends AllergiesCountArgs>(
      args?: Subset<T, AllergiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllergiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllergiesAggregateArgs>(args: Subset<T, AllergiesAggregateArgs>): PrismaPromise<GetAllergiesAggregateType<T>>

    /**
     * Group by Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllergiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllergiesGroupByArgs['orderBy'] }
        : { orderBy?: AllergiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllergiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllergiesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Allergies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AllergiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ProductsAllergies<T extends ProductsAllergiesFindManyArgs = {}>(args?: Subset<T, ProductsAllergiesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ProductsAllergies>>, PrismaPromise<Array<ProductsAllergiesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Allergies findUnique
   */
  export type AllergiesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Allergies
     * 
    **/
    select?: AllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergiesInclude | null
    /**
     * Throw an Error if a Allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Allergies to fetch.
     * 
    **/
    where: AllergiesWhereUniqueInput
  }


  /**
   * Allergies findFirst
   */
  export type AllergiesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Allergies
     * 
    **/
    select?: AllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergiesInclude | null
    /**
     * Throw an Error if a Allergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Allergies to fetch.
     * 
    **/
    where?: AllergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<AllergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allergies.
     * 
    **/
    cursor?: AllergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allergies.
     * 
    **/
    distinct?: Enumerable<AllergiesScalarFieldEnum>
  }


  /**
   * Allergies findMany
   */
  export type AllergiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Allergies
     * 
    **/
    select?: AllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergiesInclude | null
    /**
     * Filter, which Allergies to fetch.
     * 
    **/
    where?: AllergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<AllergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Allergies.
     * 
    **/
    cursor?: AllergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AllergiesScalarFieldEnum>
  }


  /**
   * Allergies create
   */
  export type AllergiesCreateArgs = {
    /**
     * Select specific fields to fetch from the Allergies
     * 
    **/
    select?: AllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergiesInclude | null
    /**
     * The data needed to create a Allergies.
     * 
    **/
    data: XOR<AllergiesCreateInput, AllergiesUncheckedCreateInput>
  }


  /**
   * Allergies createMany
   */
  export type AllergiesCreateManyArgs = {
    /**
     * The data used to create many Allergies.
     * 
    **/
    data: Enumerable<AllergiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Allergies update
   */
  export type AllergiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Allergies
     * 
    **/
    select?: AllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergiesInclude | null
    /**
     * The data needed to update a Allergies.
     * 
    **/
    data: XOR<AllergiesUpdateInput, AllergiesUncheckedUpdateInput>
    /**
     * Choose, which Allergies to update.
     * 
    **/
    where: AllergiesWhereUniqueInput
  }


  /**
   * Allergies updateMany
   */
  export type AllergiesUpdateManyArgs = {
    /**
     * The data used to update Allergies.
     * 
    **/
    data: XOR<AllergiesUpdateManyMutationInput, AllergiesUncheckedUpdateManyInput>
    /**
     * Filter which Allergies to update
     * 
    **/
    where?: AllergiesWhereInput
  }


  /**
   * Allergies upsert
   */
  export type AllergiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Allergies
     * 
    **/
    select?: AllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergiesInclude | null
    /**
     * The filter to search for the Allergies to update in case it exists.
     * 
    **/
    where: AllergiesWhereUniqueInput
    /**
     * In case the Allergies found by the `where` argument doesn't exist, create a new Allergies with this data.
     * 
    **/
    create: XOR<AllergiesCreateInput, AllergiesUncheckedCreateInput>
    /**
     * In case the Allergies was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AllergiesUpdateInput, AllergiesUncheckedUpdateInput>
  }


  /**
   * Allergies delete
   */
  export type AllergiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Allergies
     * 
    **/
    select?: AllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergiesInclude | null
    /**
     * Filter which Allergies to delete.
     * 
    **/
    where: AllergiesWhereUniqueInput
  }


  /**
   * Allergies deleteMany
   */
  export type AllergiesDeleteManyArgs = {
    /**
     * Filter which Allergies to delete
     * 
    **/
    where?: AllergiesWhereInput
  }


  /**
   * Allergies without action
   */
  export type AllergiesArgs = {
    /**
     * Select specific fields to fetch from the Allergies
     * 
    **/
    select?: AllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergiesInclude | null
  }



  /**
   * Model ProductsAllergies
   */


  export type AggregateProductsAllergies = {
    _count: ProductsAllergiesCountAggregateOutputType | null
    _avg: ProductsAllergiesAvgAggregateOutputType | null
    _sum: ProductsAllergiesSumAggregateOutputType | null
    _min: ProductsAllergiesMinAggregateOutputType | null
    _max: ProductsAllergiesMaxAggregateOutputType | null
  }

  export type ProductsAllergiesAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
  }

  export type ProductsAllergiesSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
  }

  export type ProductsAllergiesMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
    created_at: Date | null
  }

  export type ProductsAllergiesMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
    created_at: Date | null
  }

  export type ProductsAllergiesCountAggregateOutputType = {
    id: number
    product_id: number
    allergy_id: number
    created_at: number
    _all: number
  }


  export type ProductsAllergiesAvgAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
  }

  export type ProductsAllergiesSumAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
  }

  export type ProductsAllergiesMinAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
    created_at?: true
  }

  export type ProductsAllergiesMaxAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
    created_at?: true
  }

  export type ProductsAllergiesCountAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
    created_at?: true
    _all?: true
  }

  export type ProductsAllergiesAggregateArgs = {
    /**
     * Filter which ProductsAllergies to aggregate.
     * 
    **/
    where?: ProductsAllergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsAllergies to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsAllergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductsAllergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsAllergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsAllergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductsAllergies
    **/
    _count?: true | ProductsAllergiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAllergiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsAllergiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsAllergiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsAllergiesMaxAggregateInputType
  }

  export type GetProductsAllergiesAggregateType<T extends ProductsAllergiesAggregateArgs> = {
        [P in keyof T & keyof AggregateProductsAllergies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductsAllergies[P]>
      : GetScalarType<T[P], AggregateProductsAllergies[P]>
  }




  export type ProductsAllergiesGroupByArgs = {
    where?: ProductsAllergiesWhereInput
    orderBy?: Enumerable<ProductsAllergiesOrderByWithAggregationInput>
    by: Array<ProductsAllergiesScalarFieldEnum>
    having?: ProductsAllergiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsAllergiesCountAggregateInputType | true
    _avg?: ProductsAllergiesAvgAggregateInputType
    _sum?: ProductsAllergiesSumAggregateInputType
    _min?: ProductsAllergiesMinAggregateInputType
    _max?: ProductsAllergiesMaxAggregateInputType
  }


  export type ProductsAllergiesGroupByOutputType = {
    id: number
    product_id: number
    allergy_id: number
    created_at: Date | null
    _count: ProductsAllergiesCountAggregateOutputType | null
    _avg: ProductsAllergiesAvgAggregateOutputType | null
    _sum: ProductsAllergiesSumAggregateOutputType | null
    _min: ProductsAllergiesMinAggregateOutputType | null
    _max: ProductsAllergiesMaxAggregateOutputType | null
  }

  type GetProductsAllergiesGroupByPayload<T extends ProductsAllergiesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductsAllergiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsAllergiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsAllergiesGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsAllergiesGroupByOutputType[P]>
        }
      >
    >


  export type ProductsAllergiesSelect = {
    id?: boolean
    product_id?: boolean
    allergy_id?: boolean
    created_at?: boolean
    products?: boolean | ProductsArgs
    allergies?: boolean | AllergiesArgs
  }

  export type ProductsAllergiesInclude = {
    products?: boolean | ProductsArgs
    allergies?: boolean | AllergiesArgs
  }

  export type ProductsAllergiesGetPayload<
    S extends boolean | null | undefined | ProductsAllergiesArgs,
    U = keyof S
      > = S extends true
        ? ProductsAllergies
    : S extends undefined
    ? never
    : S extends ProductsAllergiesArgs | ProductsAllergiesFindManyArgs
    ?'include' extends U
    ? ProductsAllergies  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? ProductsGetPayload<S['include'][P]> :
        P extends 'allergies' ? AllergiesGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? ProductsGetPayload<S['select'][P]> :
        P extends 'allergies' ? AllergiesGetPayload<S['select'][P]> :  P extends keyof ProductsAllergies ? ProductsAllergies[P] : never
  } 
    : ProductsAllergies
  : ProductsAllergies


  type ProductsAllergiesCountArgs = Merge<
    Omit<ProductsAllergiesFindManyArgs, 'select' | 'include'> & {
      select?: ProductsAllergiesCountAggregateInputType | true
    }
  >

  export interface ProductsAllergiesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ProductsAllergies that matches the filter.
     * @param {ProductsAllergiesFindUniqueArgs} args - Arguments to find a ProductsAllergies
     * @example
     * // Get one ProductsAllergies
     * const productsAllergies = await prisma.productsAllergies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsAllergiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductsAllergiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProductsAllergies'> extends True ? CheckSelect<T, Prisma__ProductsAllergiesClient<ProductsAllergies>, Prisma__ProductsAllergiesClient<ProductsAllergiesGetPayload<T>>> : CheckSelect<T, Prisma__ProductsAllergiesClient<ProductsAllergies | null >, Prisma__ProductsAllergiesClient<ProductsAllergiesGetPayload<T> | null >>

    /**
     * Find the first ProductsAllergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAllergiesFindFirstArgs} args - Arguments to find a ProductsAllergies
     * @example
     * // Get one ProductsAllergies
     * const productsAllergies = await prisma.productsAllergies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsAllergiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductsAllergiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProductsAllergies'> extends True ? CheckSelect<T, Prisma__ProductsAllergiesClient<ProductsAllergies>, Prisma__ProductsAllergiesClient<ProductsAllergiesGetPayload<T>>> : CheckSelect<T, Prisma__ProductsAllergiesClient<ProductsAllergies | null >, Prisma__ProductsAllergiesClient<ProductsAllergiesGetPayload<T> | null >>

    /**
     * Find zero or more ProductsAllergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAllergiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductsAllergies
     * const productsAllergies = await prisma.productsAllergies.findMany()
     * 
     * // Get first 10 ProductsAllergies
     * const productsAllergies = await prisma.productsAllergies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsAllergiesWithIdOnly = await prisma.productsAllergies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsAllergiesFindManyArgs>(
      args?: SelectSubset<T, ProductsAllergiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ProductsAllergies>>, PrismaPromise<Array<ProductsAllergiesGetPayload<T>>>>

    /**
     * Create a ProductsAllergies.
     * @param {ProductsAllergiesCreateArgs} args - Arguments to create a ProductsAllergies.
     * @example
     * // Create one ProductsAllergies
     * const ProductsAllergies = await prisma.productsAllergies.create({
     *   data: {
     *     // ... data to create a ProductsAllergies
     *   }
     * })
     * 
    **/
    create<T extends ProductsAllergiesCreateArgs>(
      args: SelectSubset<T, ProductsAllergiesCreateArgs>
    ): CheckSelect<T, Prisma__ProductsAllergiesClient<ProductsAllergies>, Prisma__ProductsAllergiesClient<ProductsAllergiesGetPayload<T>>>

    /**
     * Create many ProductsAllergies.
     *     @param {ProductsAllergiesCreateManyArgs} args - Arguments to create many ProductsAllergies.
     *     @example
     *     // Create many ProductsAllergies
     *     const productsAllergies = await prisma.productsAllergies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductsAllergiesCreateManyArgs>(
      args?: SelectSubset<T, ProductsAllergiesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ProductsAllergies.
     * @param {ProductsAllergiesDeleteArgs} args - Arguments to delete one ProductsAllergies.
     * @example
     * // Delete one ProductsAllergies
     * const ProductsAllergies = await prisma.productsAllergies.delete({
     *   where: {
     *     // ... filter to delete one ProductsAllergies
     *   }
     * })
     * 
    **/
    delete<T extends ProductsAllergiesDeleteArgs>(
      args: SelectSubset<T, ProductsAllergiesDeleteArgs>
    ): CheckSelect<T, Prisma__ProductsAllergiesClient<ProductsAllergies>, Prisma__ProductsAllergiesClient<ProductsAllergiesGetPayload<T>>>

    /**
     * Update one ProductsAllergies.
     * @param {ProductsAllergiesUpdateArgs} args - Arguments to update one ProductsAllergies.
     * @example
     * // Update one ProductsAllergies
     * const productsAllergies = await prisma.productsAllergies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsAllergiesUpdateArgs>(
      args: SelectSubset<T, ProductsAllergiesUpdateArgs>
    ): CheckSelect<T, Prisma__ProductsAllergiesClient<ProductsAllergies>, Prisma__ProductsAllergiesClient<ProductsAllergiesGetPayload<T>>>

    /**
     * Delete zero or more ProductsAllergies.
     * @param {ProductsAllergiesDeleteManyArgs} args - Arguments to filter ProductsAllergies to delete.
     * @example
     * // Delete a few ProductsAllergies
     * const { count } = await prisma.productsAllergies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsAllergiesDeleteManyArgs>(
      args?: SelectSubset<T, ProductsAllergiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductsAllergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAllergiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductsAllergies
     * const productsAllergies = await prisma.productsAllergies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsAllergiesUpdateManyArgs>(
      args: SelectSubset<T, ProductsAllergiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductsAllergies.
     * @param {ProductsAllergiesUpsertArgs} args - Arguments to update or create a ProductsAllergies.
     * @example
     * // Update or create a ProductsAllergies
     * const productsAllergies = await prisma.productsAllergies.upsert({
     *   create: {
     *     // ... data to create a ProductsAllergies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductsAllergies we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsAllergiesUpsertArgs>(
      args: SelectSubset<T, ProductsAllergiesUpsertArgs>
    ): CheckSelect<T, Prisma__ProductsAllergiesClient<ProductsAllergies>, Prisma__ProductsAllergiesClient<ProductsAllergiesGetPayload<T>>>

    /**
     * Count the number of ProductsAllergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAllergiesCountArgs} args - Arguments to filter ProductsAllergies to count.
     * @example
     * // Count the number of ProductsAllergies
     * const count = await prisma.productsAllergies.count({
     *   where: {
     *     // ... the filter for the ProductsAllergies we want to count
     *   }
     * })
    **/
    count<T extends ProductsAllergiesCountArgs>(
      args?: Subset<T, ProductsAllergiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsAllergiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductsAllergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAllergiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAllergiesAggregateArgs>(args: Subset<T, ProductsAllergiesAggregateArgs>): PrismaPromise<GetProductsAllergiesAggregateType<T>>

    /**
     * Group by ProductsAllergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAllergiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsAllergiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsAllergiesGroupByArgs['orderBy'] }
        : { orderBy?: ProductsAllergiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsAllergiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsAllergiesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductsAllergies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductsAllergiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends ProductsArgs = {}>(args?: Subset<T, ProductsArgs>): CheckSelect<T, Prisma__ProductsClient<Products | null >, Prisma__ProductsClient<ProductsGetPayload<T> | null >>;

    allergies<T extends AllergiesArgs = {}>(args?: Subset<T, AllergiesArgs>): CheckSelect<T, Prisma__AllergiesClient<Allergies | null >, Prisma__AllergiesClient<AllergiesGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ProductsAllergies findUnique
   */
  export type ProductsAllergiesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ProductsAllergies
     * 
    **/
    select?: ProductsAllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsAllergiesInclude | null
    /**
     * Throw an Error if a ProductsAllergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProductsAllergies to fetch.
     * 
    **/
    where: ProductsAllergiesWhereUniqueInput
  }


  /**
   * ProductsAllergies findFirst
   */
  export type ProductsAllergiesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ProductsAllergies
     * 
    **/
    select?: ProductsAllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsAllergiesInclude | null
    /**
     * Throw an Error if a ProductsAllergies can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProductsAllergies to fetch.
     * 
    **/
    where?: ProductsAllergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsAllergies to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsAllergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductsAllergies.
     * 
    **/
    cursor?: ProductsAllergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsAllergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsAllergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductsAllergies.
     * 
    **/
    distinct?: Enumerable<ProductsAllergiesScalarFieldEnum>
  }


  /**
   * ProductsAllergies findMany
   */
  export type ProductsAllergiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProductsAllergies
     * 
    **/
    select?: ProductsAllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsAllergiesInclude | null
    /**
     * Filter, which ProductsAllergies to fetch.
     * 
    **/
    where?: ProductsAllergiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsAllergies to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsAllergiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductsAllergies.
     * 
    **/
    cursor?: ProductsAllergiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsAllergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsAllergies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductsAllergiesScalarFieldEnum>
  }


  /**
   * ProductsAllergies create
   */
  export type ProductsAllergiesCreateArgs = {
    /**
     * Select specific fields to fetch from the ProductsAllergies
     * 
    **/
    select?: ProductsAllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsAllergiesInclude | null
    /**
     * The data needed to create a ProductsAllergies.
     * 
    **/
    data: XOR<ProductsAllergiesCreateInput, ProductsAllergiesUncheckedCreateInput>
  }


  /**
   * ProductsAllergies createMany
   */
  export type ProductsAllergiesCreateManyArgs = {
    /**
     * The data used to create many ProductsAllergies.
     * 
    **/
    data: Enumerable<ProductsAllergiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProductsAllergies update
   */
  export type ProductsAllergiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProductsAllergies
     * 
    **/
    select?: ProductsAllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsAllergiesInclude | null
    /**
     * The data needed to update a ProductsAllergies.
     * 
    **/
    data: XOR<ProductsAllergiesUpdateInput, ProductsAllergiesUncheckedUpdateInput>
    /**
     * Choose, which ProductsAllergies to update.
     * 
    **/
    where: ProductsAllergiesWhereUniqueInput
  }


  /**
   * ProductsAllergies updateMany
   */
  export type ProductsAllergiesUpdateManyArgs = {
    /**
     * The data used to update ProductsAllergies.
     * 
    **/
    data: XOR<ProductsAllergiesUpdateManyMutationInput, ProductsAllergiesUncheckedUpdateManyInput>
    /**
     * Filter which ProductsAllergies to update
     * 
    **/
    where?: ProductsAllergiesWhereInput
  }


  /**
   * ProductsAllergies upsert
   */
  export type ProductsAllergiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProductsAllergies
     * 
    **/
    select?: ProductsAllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsAllergiesInclude | null
    /**
     * The filter to search for the ProductsAllergies to update in case it exists.
     * 
    **/
    where: ProductsAllergiesWhereUniqueInput
    /**
     * In case the ProductsAllergies found by the `where` argument doesn't exist, create a new ProductsAllergies with this data.
     * 
    **/
    create: XOR<ProductsAllergiesCreateInput, ProductsAllergiesUncheckedCreateInput>
    /**
     * In case the ProductsAllergies was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductsAllergiesUpdateInput, ProductsAllergiesUncheckedUpdateInput>
  }


  /**
   * ProductsAllergies delete
   */
  export type ProductsAllergiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProductsAllergies
     * 
    **/
    select?: ProductsAllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsAllergiesInclude | null
    /**
     * Filter which ProductsAllergies to delete.
     * 
    **/
    where: ProductsAllergiesWhereUniqueInput
  }


  /**
   * ProductsAllergies deleteMany
   */
  export type ProductsAllergiesDeleteManyArgs = {
    /**
     * Filter which ProductsAllergies to delete
     * 
    **/
    where?: ProductsAllergiesWhereInput
  }


  /**
   * ProductsAllergies without action
   */
  export type ProductsAllergiesArgs = {
    /**
     * Select specific fields to fetch from the ProductsAllergies
     * 
    **/
    select?: ProductsAllergiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsAllergiesInclude | null
  }



  /**
   * Model Nutritions
   */


  export type AggregateNutritions = {
    _count: NutritionsCountAggregateOutputType | null
    _avg: NutritionsAvgAggregateOutputType | null
    _sum: NutritionsSumAggregateOutputType | null
    _min: NutritionsMinAggregateOutputType | null
    _max: NutritionsMaxAggregateOutputType | null
  }

  export type NutritionsAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
  }

  export type NutritionsSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
  }

  export type NutritionsMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
    created_at: Date | null
  }

  export type NutritionsMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
    created_at: Date | null
  }

  export type NutritionsCountAggregateOutputType = {
    id: number
    product_id: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
    created_at: number
    _all: number
  }


  export type NutritionsAvgAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
  }

  export type NutritionsSumAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
  }

  export type NutritionsMinAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
    created_at?: true
  }

  export type NutritionsMaxAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
    created_at?: true
  }

  export type NutritionsCountAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
    created_at?: true
    _all?: true
  }

  export type NutritionsAggregateArgs = {
    /**
     * Filter which Nutritions to aggregate.
     * 
    **/
    where?: NutritionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<NutritionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NutritionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nutritions
    **/
    _count?: true | NutritionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NutritionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NutritionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NutritionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NutritionsMaxAggregateInputType
  }

  export type GetNutritionsAggregateType<T extends NutritionsAggregateArgs> = {
        [P in keyof T & keyof AggregateNutritions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNutritions[P]>
      : GetScalarType<T[P], AggregateNutritions[P]>
  }




  export type NutritionsGroupByArgs = {
    where?: NutritionsWhereInput
    orderBy?: Enumerable<NutritionsOrderByWithAggregationInput>
    by: Array<NutritionsScalarFieldEnum>
    having?: NutritionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NutritionsCountAggregateInputType | true
    _avg?: NutritionsAvgAggregateInputType
    _sum?: NutritionsSumAggregateInputType
    _min?: NutritionsMinAggregateInputType
    _max?: NutritionsMaxAggregateInputType
  }


  export type NutritionsGroupByOutputType = {
    id: number
    product_id: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
    created_at: Date | null
    _count: NutritionsCountAggregateOutputType | null
    _avg: NutritionsAvgAggregateOutputType | null
    _sum: NutritionsSumAggregateOutputType | null
    _min: NutritionsMinAggregateOutputType | null
    _max: NutritionsMaxAggregateOutputType | null
  }

  type GetNutritionsGroupByPayload<T extends NutritionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NutritionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NutritionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NutritionsGroupByOutputType[P]>
            : GetScalarType<T[P], NutritionsGroupByOutputType[P]>
        }
      >
    >


  export type NutritionsSelect = {
    id?: boolean
    product_id?: boolean
    caffein?: boolean
    fat?: boolean
    sugar?: boolean
    sodium?: boolean
    products?: boolean | ProductsArgs
    created_at?: boolean
  }

  export type NutritionsInclude = {
    products?: boolean | ProductsArgs
  }

  export type NutritionsGetPayload<
    S extends boolean | null | undefined | NutritionsArgs,
    U = keyof S
      > = S extends true
        ? Nutritions
    : S extends undefined
    ? never
    : S extends NutritionsArgs | NutritionsFindManyArgs
    ?'include' extends U
    ? Nutritions  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? ProductsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? ProductsGetPayload<S['select'][P]> :  P extends keyof Nutritions ? Nutritions[P] : never
  } 
    : Nutritions
  : Nutritions


  type NutritionsCountArgs = Merge<
    Omit<NutritionsFindManyArgs, 'select' | 'include'> & {
      select?: NutritionsCountAggregateInputType | true
    }
  >

  export interface NutritionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Nutritions that matches the filter.
     * @param {NutritionsFindUniqueArgs} args - Arguments to find a Nutritions
     * @example
     * // Get one Nutritions
     * const nutritions = await prisma.nutritions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NutritionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NutritionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Nutritions'> extends True ? CheckSelect<T, Prisma__NutritionsClient<Nutritions>, Prisma__NutritionsClient<NutritionsGetPayload<T>>> : CheckSelect<T, Prisma__NutritionsClient<Nutritions | null >, Prisma__NutritionsClient<NutritionsGetPayload<T> | null >>

    /**
     * Find the first Nutritions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsFindFirstArgs} args - Arguments to find a Nutritions
     * @example
     * // Get one Nutritions
     * const nutritions = await prisma.nutritions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NutritionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NutritionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Nutritions'> extends True ? CheckSelect<T, Prisma__NutritionsClient<Nutritions>, Prisma__NutritionsClient<NutritionsGetPayload<T>>> : CheckSelect<T, Prisma__NutritionsClient<Nutritions | null >, Prisma__NutritionsClient<NutritionsGetPayload<T> | null >>

    /**
     * Find zero or more Nutritions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nutritions
     * const nutritions = await prisma.nutritions.findMany()
     * 
     * // Get first 10 Nutritions
     * const nutritions = await prisma.nutritions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nutritionsWithIdOnly = await prisma.nutritions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NutritionsFindManyArgs>(
      args?: SelectSubset<T, NutritionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Nutritions>>, PrismaPromise<Array<NutritionsGetPayload<T>>>>

    /**
     * Create a Nutritions.
     * @param {NutritionsCreateArgs} args - Arguments to create a Nutritions.
     * @example
     * // Create one Nutritions
     * const Nutritions = await prisma.nutritions.create({
     *   data: {
     *     // ... data to create a Nutritions
     *   }
     * })
     * 
    **/
    create<T extends NutritionsCreateArgs>(
      args: SelectSubset<T, NutritionsCreateArgs>
    ): CheckSelect<T, Prisma__NutritionsClient<Nutritions>, Prisma__NutritionsClient<NutritionsGetPayload<T>>>

    /**
     * Create many Nutritions.
     *     @param {NutritionsCreateManyArgs} args - Arguments to create many Nutritions.
     *     @example
     *     // Create many Nutritions
     *     const nutritions = await prisma.nutritions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NutritionsCreateManyArgs>(
      args?: SelectSubset<T, NutritionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Nutritions.
     * @param {NutritionsDeleteArgs} args - Arguments to delete one Nutritions.
     * @example
     * // Delete one Nutritions
     * const Nutritions = await prisma.nutritions.delete({
     *   where: {
     *     // ... filter to delete one Nutritions
     *   }
     * })
     * 
    **/
    delete<T extends NutritionsDeleteArgs>(
      args: SelectSubset<T, NutritionsDeleteArgs>
    ): CheckSelect<T, Prisma__NutritionsClient<Nutritions>, Prisma__NutritionsClient<NutritionsGetPayload<T>>>

    /**
     * Update one Nutritions.
     * @param {NutritionsUpdateArgs} args - Arguments to update one Nutritions.
     * @example
     * // Update one Nutritions
     * const nutritions = await prisma.nutritions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NutritionsUpdateArgs>(
      args: SelectSubset<T, NutritionsUpdateArgs>
    ): CheckSelect<T, Prisma__NutritionsClient<Nutritions>, Prisma__NutritionsClient<NutritionsGetPayload<T>>>

    /**
     * Delete zero or more Nutritions.
     * @param {NutritionsDeleteManyArgs} args - Arguments to filter Nutritions to delete.
     * @example
     * // Delete a few Nutritions
     * const { count } = await prisma.nutritions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NutritionsDeleteManyArgs>(
      args?: SelectSubset<T, NutritionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nutritions
     * const nutritions = await prisma.nutritions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NutritionsUpdateManyArgs>(
      args: SelectSubset<T, NutritionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Nutritions.
     * @param {NutritionsUpsertArgs} args - Arguments to update or create a Nutritions.
     * @example
     * // Update or create a Nutritions
     * const nutritions = await prisma.nutritions.upsert({
     *   create: {
     *     // ... data to create a Nutritions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nutritions we want to update
     *   }
     * })
    **/
    upsert<T extends NutritionsUpsertArgs>(
      args: SelectSubset<T, NutritionsUpsertArgs>
    ): CheckSelect<T, Prisma__NutritionsClient<Nutritions>, Prisma__NutritionsClient<NutritionsGetPayload<T>>>

    /**
     * Count the number of Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsCountArgs} args - Arguments to filter Nutritions to count.
     * @example
     * // Count the number of Nutritions
     * const count = await prisma.nutritions.count({
     *   where: {
     *     // ... the filter for the Nutritions we want to count
     *   }
     * })
    **/
    count<T extends NutritionsCountArgs>(
      args?: Subset<T, NutritionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NutritionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NutritionsAggregateArgs>(args: Subset<T, NutritionsAggregateArgs>): PrismaPromise<GetNutritionsAggregateType<T>>

    /**
     * Group by Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NutritionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NutritionsGroupByArgs['orderBy'] }
        : { orderBy?: NutritionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NutritionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNutritionsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nutritions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NutritionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends ProductsArgs = {}>(args?: Subset<T, ProductsArgs>): CheckSelect<T, Prisma__ProductsClient<Products | null >, Prisma__ProductsClient<ProductsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Nutritions findUnique
   */
  export type NutritionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Nutritions
     * 
    **/
    select?: NutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionsInclude | null
    /**
     * Throw an Error if a Nutritions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Nutritions to fetch.
     * 
    **/
    where: NutritionsWhereUniqueInput
  }


  /**
   * Nutritions findFirst
   */
  export type NutritionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Nutritions
     * 
    **/
    select?: NutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionsInclude | null
    /**
     * Throw an Error if a Nutritions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Nutritions to fetch.
     * 
    **/
    where?: NutritionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<NutritionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nutritions.
     * 
    **/
    cursor?: NutritionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nutritions.
     * 
    **/
    distinct?: Enumerable<NutritionsScalarFieldEnum>
  }


  /**
   * Nutritions findMany
   */
  export type NutritionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Nutritions
     * 
    **/
    select?: NutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionsInclude | null
    /**
     * Filter, which Nutritions to fetch.
     * 
    **/
    where?: NutritionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<NutritionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nutritions.
     * 
    **/
    cursor?: NutritionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NutritionsScalarFieldEnum>
  }


  /**
   * Nutritions create
   */
  export type NutritionsCreateArgs = {
    /**
     * Select specific fields to fetch from the Nutritions
     * 
    **/
    select?: NutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionsInclude | null
    /**
     * The data needed to create a Nutritions.
     * 
    **/
    data: XOR<NutritionsCreateInput, NutritionsUncheckedCreateInput>
  }


  /**
   * Nutritions createMany
   */
  export type NutritionsCreateManyArgs = {
    /**
     * The data used to create many Nutritions.
     * 
    **/
    data: Enumerable<NutritionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Nutritions update
   */
  export type NutritionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Nutritions
     * 
    **/
    select?: NutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionsInclude | null
    /**
     * The data needed to update a Nutritions.
     * 
    **/
    data: XOR<NutritionsUpdateInput, NutritionsUncheckedUpdateInput>
    /**
     * Choose, which Nutritions to update.
     * 
    **/
    where: NutritionsWhereUniqueInput
  }


  /**
   * Nutritions updateMany
   */
  export type NutritionsUpdateManyArgs = {
    /**
     * The data used to update Nutritions.
     * 
    **/
    data: XOR<NutritionsUpdateManyMutationInput, NutritionsUncheckedUpdateManyInput>
    /**
     * Filter which Nutritions to update
     * 
    **/
    where?: NutritionsWhereInput
  }


  /**
   * Nutritions upsert
   */
  export type NutritionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Nutritions
     * 
    **/
    select?: NutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionsInclude | null
    /**
     * The filter to search for the Nutritions to update in case it exists.
     * 
    **/
    where: NutritionsWhereUniqueInput
    /**
     * In case the Nutritions found by the `where` argument doesn't exist, create a new Nutritions with this data.
     * 
    **/
    create: XOR<NutritionsCreateInput, NutritionsUncheckedCreateInput>
    /**
     * In case the Nutritions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NutritionsUpdateInput, NutritionsUncheckedUpdateInput>
  }


  /**
   * Nutritions delete
   */
  export type NutritionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Nutritions
     * 
    **/
    select?: NutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionsInclude | null
    /**
     * Filter which Nutritions to delete.
     * 
    **/
    where: NutritionsWhereUniqueInput
  }


  /**
   * Nutritions deleteMany
   */
  export type NutritionsDeleteManyArgs = {
    /**
     * Filter which Nutritions to delete
     * 
    **/
    where?: NutritionsWhereInput
  }


  /**
   * Nutritions without action
   */
  export type NutritionsArgs = {
    /**
     * Select specific fields to fetch from the Nutritions
     * 
    **/
    select?: NutritionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionsInclude | null
  }



  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    username: string | null
    address: string | null
    phone_number: string | null
    policy_agreed: boolean | null
    created_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    username: string | null
    address: string | null
    phone_number: string | null
    policy_agreed: boolean | null
    created_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    username: number
    address: number
    phone_number: number
    policy_agreed: number
    created_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    address?: true
    phone_number?: true
    policy_agreed?: true
    created_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    address?: true
    phone_number?: true
    policy_agreed?: true
    created_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    address?: true
    phone_number?: true
    policy_agreed?: true
    created_at?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    username: string | null
    address: string | null
    phone_number: string | null
    policy_agreed: boolean
    created_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    address?: boolean
    phone_number?: boolean
    policy_agreed?: boolean
    created_at?: boolean
    ProductsLikes?: boolean | ProductsLikesFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type UsersInclude = {
    ProductsLikes?: boolean | ProductsLikesFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type UsersGetPayload<
    S extends boolean | null | undefined | UsersArgs,
    U = keyof S
      > = S extends true
        ? Users
    : S extends undefined
    ? never
    : S extends UsersArgs | UsersFindManyArgs
    ?'include' extends U
    ? Users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ProductsLikes' ? Array < ProductsLikesGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ProductsLikes' ? Array < ProductsLikesGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Users ? Users[P] : never
  } 
    : Users
  : Users


  type UsersCountArgs = Merge<
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface UsersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Users>>, PrismaPromise<Array<UsersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs>(
      args?: SelectSubset<T, UsersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ProductsLikes<T extends ProductsLikesFindManyArgs = {}>(args?: Subset<T, ProductsLikesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ProductsLikes>>, PrismaPromise<Array<ProductsLikesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Throw an Error if a Users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Throw an Error if a Users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to create a Users.
     * 
    **/
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to update a Users.
     * 
    **/
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The filter to search for the Users to update in case it exists.
     * 
    **/
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     * 
    **/
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter which Users to delete.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
  }



  /**
   * Model ProductsLikes
   */


  export type AggregateProductsLikes = {
    _count: ProductsLikesCountAggregateOutputType | null
    _avg: ProductsLikesAvgAggregateOutputType | null
    _sum: ProductsLikesSumAggregateOutputType | null
    _min: ProductsLikesMinAggregateOutputType | null
    _max: ProductsLikesMaxAggregateOutputType | null
  }

  export type ProductsLikesAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    user_id: number | null
  }

  export type ProductsLikesSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    user_id: number | null
  }

  export type ProductsLikesMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    user_id: number | null
    created_at: Date | null
  }

  export type ProductsLikesMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    user_id: number | null
    created_at: Date | null
  }

  export type ProductsLikesCountAggregateOutputType = {
    id: number
    product_id: number
    user_id: number
    created_at: number
    _all: number
  }


  export type ProductsLikesAvgAggregateInputType = {
    id?: true
    product_id?: true
    user_id?: true
  }

  export type ProductsLikesSumAggregateInputType = {
    id?: true
    product_id?: true
    user_id?: true
  }

  export type ProductsLikesMinAggregateInputType = {
    id?: true
    product_id?: true
    user_id?: true
    created_at?: true
  }

  export type ProductsLikesMaxAggregateInputType = {
    id?: true
    product_id?: true
    user_id?: true
    created_at?: true
  }

  export type ProductsLikesCountAggregateInputType = {
    id?: true
    product_id?: true
    user_id?: true
    created_at?: true
    _all?: true
  }

  export type ProductsLikesAggregateArgs = {
    /**
     * Filter which ProductsLikes to aggregate.
     * 
    **/
    where?: ProductsLikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsLikes to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsLikesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductsLikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsLikes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsLikes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductsLikes
    **/
    _count?: true | ProductsLikesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsLikesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsLikesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsLikesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsLikesMaxAggregateInputType
  }

  export type GetProductsLikesAggregateType<T extends ProductsLikesAggregateArgs> = {
        [P in keyof T & keyof AggregateProductsLikes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductsLikes[P]>
      : GetScalarType<T[P], AggregateProductsLikes[P]>
  }




  export type ProductsLikesGroupByArgs = {
    where?: ProductsLikesWhereInput
    orderBy?: Enumerable<ProductsLikesOrderByWithAggregationInput>
    by: Array<ProductsLikesScalarFieldEnum>
    having?: ProductsLikesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsLikesCountAggregateInputType | true
    _avg?: ProductsLikesAvgAggregateInputType
    _sum?: ProductsLikesSumAggregateInputType
    _min?: ProductsLikesMinAggregateInputType
    _max?: ProductsLikesMaxAggregateInputType
  }


  export type ProductsLikesGroupByOutputType = {
    id: number
    product_id: number
    user_id: number
    created_at: Date | null
    _count: ProductsLikesCountAggregateOutputType | null
    _avg: ProductsLikesAvgAggregateOutputType | null
    _sum: ProductsLikesSumAggregateOutputType | null
    _min: ProductsLikesMinAggregateOutputType | null
    _max: ProductsLikesMaxAggregateOutputType | null
  }

  type GetProductsLikesGroupByPayload<T extends ProductsLikesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductsLikesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsLikesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsLikesGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsLikesGroupByOutputType[P]>
        }
      >
    >


  export type ProductsLikesSelect = {
    id?: boolean
    product_id?: boolean
    user_id?: boolean
    created_at?: boolean
    products?: boolean | ProductsArgs
    users?: boolean | UsersArgs
  }

  export type ProductsLikesInclude = {
    products?: boolean | ProductsArgs
    users?: boolean | UsersArgs
  }

  export type ProductsLikesGetPayload<
    S extends boolean | null | undefined | ProductsLikesArgs,
    U = keyof S
      > = S extends true
        ? ProductsLikes
    : S extends undefined
    ? never
    : S extends ProductsLikesArgs | ProductsLikesFindManyArgs
    ?'include' extends U
    ? ProductsLikes  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? ProductsGetPayload<S['include'][P]> :
        P extends 'users' ? UsersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? ProductsGetPayload<S['select'][P]> :
        P extends 'users' ? UsersGetPayload<S['select'][P]> :  P extends keyof ProductsLikes ? ProductsLikes[P] : never
  } 
    : ProductsLikes
  : ProductsLikes


  type ProductsLikesCountArgs = Merge<
    Omit<ProductsLikesFindManyArgs, 'select' | 'include'> & {
      select?: ProductsLikesCountAggregateInputType | true
    }
  >

  export interface ProductsLikesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ProductsLikes that matches the filter.
     * @param {ProductsLikesFindUniqueArgs} args - Arguments to find a ProductsLikes
     * @example
     * // Get one ProductsLikes
     * const productsLikes = await prisma.productsLikes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsLikesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductsLikesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProductsLikes'> extends True ? CheckSelect<T, Prisma__ProductsLikesClient<ProductsLikes>, Prisma__ProductsLikesClient<ProductsLikesGetPayload<T>>> : CheckSelect<T, Prisma__ProductsLikesClient<ProductsLikes | null >, Prisma__ProductsLikesClient<ProductsLikesGetPayload<T> | null >>

    /**
     * Find the first ProductsLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsLikesFindFirstArgs} args - Arguments to find a ProductsLikes
     * @example
     * // Get one ProductsLikes
     * const productsLikes = await prisma.productsLikes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsLikesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductsLikesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProductsLikes'> extends True ? CheckSelect<T, Prisma__ProductsLikesClient<ProductsLikes>, Prisma__ProductsLikesClient<ProductsLikesGetPayload<T>>> : CheckSelect<T, Prisma__ProductsLikesClient<ProductsLikes | null >, Prisma__ProductsLikesClient<ProductsLikesGetPayload<T> | null >>

    /**
     * Find zero or more ProductsLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsLikesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductsLikes
     * const productsLikes = await prisma.productsLikes.findMany()
     * 
     * // Get first 10 ProductsLikes
     * const productsLikes = await prisma.productsLikes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsLikesWithIdOnly = await prisma.productsLikes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsLikesFindManyArgs>(
      args?: SelectSubset<T, ProductsLikesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ProductsLikes>>, PrismaPromise<Array<ProductsLikesGetPayload<T>>>>

    /**
     * Create a ProductsLikes.
     * @param {ProductsLikesCreateArgs} args - Arguments to create a ProductsLikes.
     * @example
     * // Create one ProductsLikes
     * const ProductsLikes = await prisma.productsLikes.create({
     *   data: {
     *     // ... data to create a ProductsLikes
     *   }
     * })
     * 
    **/
    create<T extends ProductsLikesCreateArgs>(
      args: SelectSubset<T, ProductsLikesCreateArgs>
    ): CheckSelect<T, Prisma__ProductsLikesClient<ProductsLikes>, Prisma__ProductsLikesClient<ProductsLikesGetPayload<T>>>

    /**
     * Create many ProductsLikes.
     *     @param {ProductsLikesCreateManyArgs} args - Arguments to create many ProductsLikes.
     *     @example
     *     // Create many ProductsLikes
     *     const productsLikes = await prisma.productsLikes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductsLikesCreateManyArgs>(
      args?: SelectSubset<T, ProductsLikesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ProductsLikes.
     * @param {ProductsLikesDeleteArgs} args - Arguments to delete one ProductsLikes.
     * @example
     * // Delete one ProductsLikes
     * const ProductsLikes = await prisma.productsLikes.delete({
     *   where: {
     *     // ... filter to delete one ProductsLikes
     *   }
     * })
     * 
    **/
    delete<T extends ProductsLikesDeleteArgs>(
      args: SelectSubset<T, ProductsLikesDeleteArgs>
    ): CheckSelect<T, Prisma__ProductsLikesClient<ProductsLikes>, Prisma__ProductsLikesClient<ProductsLikesGetPayload<T>>>

    /**
     * Update one ProductsLikes.
     * @param {ProductsLikesUpdateArgs} args - Arguments to update one ProductsLikes.
     * @example
     * // Update one ProductsLikes
     * const productsLikes = await prisma.productsLikes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsLikesUpdateArgs>(
      args: SelectSubset<T, ProductsLikesUpdateArgs>
    ): CheckSelect<T, Prisma__ProductsLikesClient<ProductsLikes>, Prisma__ProductsLikesClient<ProductsLikesGetPayload<T>>>

    /**
     * Delete zero or more ProductsLikes.
     * @param {ProductsLikesDeleteManyArgs} args - Arguments to filter ProductsLikes to delete.
     * @example
     * // Delete a few ProductsLikes
     * const { count } = await prisma.productsLikes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsLikesDeleteManyArgs>(
      args?: SelectSubset<T, ProductsLikesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductsLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsLikesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductsLikes
     * const productsLikes = await prisma.productsLikes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsLikesUpdateManyArgs>(
      args: SelectSubset<T, ProductsLikesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductsLikes.
     * @param {ProductsLikesUpsertArgs} args - Arguments to update or create a ProductsLikes.
     * @example
     * // Update or create a ProductsLikes
     * const productsLikes = await prisma.productsLikes.upsert({
     *   create: {
     *     // ... data to create a ProductsLikes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductsLikes we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsLikesUpsertArgs>(
      args: SelectSubset<T, ProductsLikesUpsertArgs>
    ): CheckSelect<T, Prisma__ProductsLikesClient<ProductsLikes>, Prisma__ProductsLikesClient<ProductsLikesGetPayload<T>>>

    /**
     * Count the number of ProductsLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsLikesCountArgs} args - Arguments to filter ProductsLikes to count.
     * @example
     * // Count the number of ProductsLikes
     * const count = await prisma.productsLikes.count({
     *   where: {
     *     // ... the filter for the ProductsLikes we want to count
     *   }
     * })
    **/
    count<T extends ProductsLikesCountArgs>(
      args?: Subset<T, ProductsLikesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsLikesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductsLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsLikesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsLikesAggregateArgs>(args: Subset<T, ProductsLikesAggregateArgs>): PrismaPromise<GetProductsLikesAggregateType<T>>

    /**
     * Group by ProductsLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsLikesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsLikesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsLikesGroupByArgs['orderBy'] }
        : { orderBy?: ProductsLikesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsLikesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsLikesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductsLikes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductsLikesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends ProductsArgs = {}>(args?: Subset<T, ProductsArgs>): CheckSelect<T, Prisma__ProductsClient<Products | null >, Prisma__ProductsClient<ProductsGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ProductsLikes findUnique
   */
  export type ProductsLikesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ProductsLikes
     * 
    **/
    select?: ProductsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsLikesInclude | null
    /**
     * Throw an Error if a ProductsLikes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProductsLikes to fetch.
     * 
    **/
    where: ProductsLikesWhereUniqueInput
  }


  /**
   * ProductsLikes findFirst
   */
  export type ProductsLikesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ProductsLikes
     * 
    **/
    select?: ProductsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsLikesInclude | null
    /**
     * Throw an Error if a ProductsLikes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ProductsLikes to fetch.
     * 
    **/
    where?: ProductsLikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsLikes to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsLikesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductsLikes.
     * 
    **/
    cursor?: ProductsLikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsLikes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsLikes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductsLikes.
     * 
    **/
    distinct?: Enumerable<ProductsLikesScalarFieldEnum>
  }


  /**
   * ProductsLikes findMany
   */
  export type ProductsLikesFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProductsLikes
     * 
    **/
    select?: ProductsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsLikesInclude | null
    /**
     * Filter, which ProductsLikes to fetch.
     * 
    **/
    where?: ProductsLikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductsLikes to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductsLikesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductsLikes.
     * 
    **/
    cursor?: ProductsLikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductsLikes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductsLikes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductsLikesScalarFieldEnum>
  }


  /**
   * ProductsLikes create
   */
  export type ProductsLikesCreateArgs = {
    /**
     * Select specific fields to fetch from the ProductsLikes
     * 
    **/
    select?: ProductsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsLikesInclude | null
    /**
     * The data needed to create a ProductsLikes.
     * 
    **/
    data: XOR<ProductsLikesCreateInput, ProductsLikesUncheckedCreateInput>
  }


  /**
   * ProductsLikes createMany
   */
  export type ProductsLikesCreateManyArgs = {
    /**
     * The data used to create many ProductsLikes.
     * 
    **/
    data: Enumerable<ProductsLikesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProductsLikes update
   */
  export type ProductsLikesUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProductsLikes
     * 
    **/
    select?: ProductsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsLikesInclude | null
    /**
     * The data needed to update a ProductsLikes.
     * 
    **/
    data: XOR<ProductsLikesUpdateInput, ProductsLikesUncheckedUpdateInput>
    /**
     * Choose, which ProductsLikes to update.
     * 
    **/
    where: ProductsLikesWhereUniqueInput
  }


  /**
   * ProductsLikes updateMany
   */
  export type ProductsLikesUpdateManyArgs = {
    /**
     * The data used to update ProductsLikes.
     * 
    **/
    data: XOR<ProductsLikesUpdateManyMutationInput, ProductsLikesUncheckedUpdateManyInput>
    /**
     * Filter which ProductsLikes to update
     * 
    **/
    where?: ProductsLikesWhereInput
  }


  /**
   * ProductsLikes upsert
   */
  export type ProductsLikesUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProductsLikes
     * 
    **/
    select?: ProductsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsLikesInclude | null
    /**
     * The filter to search for the ProductsLikes to update in case it exists.
     * 
    **/
    where: ProductsLikesWhereUniqueInput
    /**
     * In case the ProductsLikes found by the `where` argument doesn't exist, create a new ProductsLikes with this data.
     * 
    **/
    create: XOR<ProductsLikesCreateInput, ProductsLikesUncheckedCreateInput>
    /**
     * In case the ProductsLikes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductsLikesUpdateInput, ProductsLikesUncheckedUpdateInput>
  }


  /**
   * ProductsLikes delete
   */
  export type ProductsLikesDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProductsLikes
     * 
    **/
    select?: ProductsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsLikesInclude | null
    /**
     * Filter which ProductsLikes to delete.
     * 
    **/
    where: ProductsLikesWhereUniqueInput
  }


  /**
   * ProductsLikes deleteMany
   */
  export type ProductsLikesDeleteManyArgs = {
    /**
     * Filter which ProductsLikes to delete
     * 
    **/
    where?: ProductsLikesWhereInput
  }


  /**
   * ProductsLikes without action
   */
  export type ProductsLikesArgs = {
    /**
     * Select specific fields to fetch from the ProductsLikes
     * 
    **/
    select?: ProductsLikesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductsLikesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoriesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    korean_name: 'korean_name',
    english_name: 'english_name',
    category_id: 'category_id',
    created_at: 'created_at'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const ProductsImagesScalarFieldEnum: {
    id: 'id',
    image_url: 'image_url',
    product_id: 'product_id',
    created_at: 'created_at'
  };

  export type ProductsImagesScalarFieldEnum = (typeof ProductsImagesScalarFieldEnum)[keyof typeof ProductsImagesScalarFieldEnum]


  export const AllergiesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at'
  };

  export type AllergiesScalarFieldEnum = (typeof AllergiesScalarFieldEnum)[keyof typeof AllergiesScalarFieldEnum]


  export const ProductsAllergiesScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    allergy_id: 'allergy_id',
    created_at: 'created_at'
  };

  export type ProductsAllergiesScalarFieldEnum = (typeof ProductsAllergiesScalarFieldEnum)[keyof typeof ProductsAllergiesScalarFieldEnum]


  export const NutritionsScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    caffein: 'caffein',
    fat: 'fat',
    sugar: 'sugar',
    sodium: 'sodium',
    created_at: 'created_at'
  };

  export type NutritionsScalarFieldEnum = (typeof NutritionsScalarFieldEnum)[keyof typeof NutritionsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    username: 'username',
    address: 'address',
    phone_number: 'phone_number',
    policy_agreed: 'policy_agreed',
    created_at: 'created_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ProductsLikesScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    user_id: 'user_id',
    created_at: 'created_at'
  };

  export type ProductsLikesScalarFieldEnum = (typeof ProductsLikesScalarFieldEnum)[keyof typeof ProductsLikesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type CategoriesWhereInput = {
    AND?: Enumerable<CategoriesWhereInput>
    OR?: Enumerable<CategoriesWhereInput>
    NOT?: Enumerable<CategoriesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    Products?: ProductsListRelationFilter
  }

  export type CategoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    Products?: ProductsOrderByRelationAggregateInput
  }

  export type CategoriesWhereUniqueInput = {
    id?: number
  }

  export type CategoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    _count?: CategoriesCountOrderByAggregateInput
    _avg?: CategoriesAvgOrderByAggregateInput
    _max?: CategoriesMaxOrderByAggregateInput
    _min?: CategoriesMinOrderByAggregateInput
    _sum?: CategoriesSumOrderByAggregateInput
  }

  export type CategoriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoriesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ProductsWhereInput = {
    AND?: Enumerable<ProductsWhereInput>
    OR?: Enumerable<ProductsWhereInput>
    NOT?: Enumerable<ProductsWhereInput>
    id?: IntFilter | number
    korean_name?: StringFilter | string
    english_name?: StringNullableFilter | string | null
    category_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    categories?: XOR<CategoriesRelationFilter, CategoriesWhereInput>
    ProductsImages?: ProductsImagesListRelationFilter
    ProductsAllergies?: ProductsAllergiesListRelationFilter
    ProductsLikes?: ProductsLikesListRelationFilter
    Nutritions?: XOR<NutritionsRelationFilter, NutritionsWhereInput> | null
  }

  export type ProductsOrderByWithRelationInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
    categories?: CategoriesOrderByWithRelationInput
    ProductsImages?: ProductsImagesOrderByRelationAggregateInput
    ProductsAllergies?: ProductsAllergiesOrderByRelationAggregateInput
    ProductsLikes?: ProductsLikesOrderByRelationAggregateInput
    Nutritions?: NutritionsOrderByWithRelationInput
  }

  export type ProductsWhereUniqueInput = {
    id?: number
    korean_name?: string
  }

  export type ProductsOrderByWithAggregationInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
    _count?: ProductsCountOrderByAggregateInput
    _avg?: ProductsAvgOrderByAggregateInput
    _max?: ProductsMaxOrderByAggregateInput
    _min?: ProductsMinOrderByAggregateInput
    _sum?: ProductsSumOrderByAggregateInput
  }

  export type ProductsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    korean_name?: StringWithAggregatesFilter | string
    english_name?: StringNullableWithAggregatesFilter | string | null
    category_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ProductsImagesWhereInput = {
    AND?: Enumerable<ProductsImagesWhereInput>
    OR?: Enumerable<ProductsImagesWhereInput>
    NOT?: Enumerable<ProductsImagesWhereInput>
    id?: IntFilter | number
    image_url?: StringFilter | string
    product_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    products?: XOR<ProductsRelationFilter, ProductsWhereInput>
  }

  export type ProductsImagesOrderByWithRelationInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
    products?: ProductsOrderByWithRelationInput
  }

  export type ProductsImagesWhereUniqueInput = {
    id?: number
  }

  export type ProductsImagesOrderByWithAggregationInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
    _count?: ProductsImagesCountOrderByAggregateInput
    _avg?: ProductsImagesAvgOrderByAggregateInput
    _max?: ProductsImagesMaxOrderByAggregateInput
    _min?: ProductsImagesMinOrderByAggregateInput
    _sum?: ProductsImagesSumOrderByAggregateInput
  }

  export type ProductsImagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductsImagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductsImagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductsImagesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image_url?: StringWithAggregatesFilter | string
    product_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type AllergiesWhereInput = {
    AND?: Enumerable<AllergiesWhereInput>
    OR?: Enumerable<AllergiesWhereInput>
    NOT?: Enumerable<AllergiesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    ProductsAllergies?: ProductsAllergiesListRelationFilter
  }

  export type AllergiesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    ProductsAllergies?: ProductsAllergiesOrderByRelationAggregateInput
  }

  export type AllergiesWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type AllergiesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    _count?: AllergiesCountOrderByAggregateInput
    _avg?: AllergiesAvgOrderByAggregateInput
    _max?: AllergiesMaxOrderByAggregateInput
    _min?: AllergiesMinOrderByAggregateInput
    _sum?: AllergiesSumOrderByAggregateInput
  }

  export type AllergiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AllergiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<AllergiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AllergiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ProductsAllergiesWhereInput = {
    AND?: Enumerable<ProductsAllergiesWhereInput>
    OR?: Enumerable<ProductsAllergiesWhereInput>
    NOT?: Enumerable<ProductsAllergiesWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    allergy_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    products?: XOR<ProductsRelationFilter, ProductsWhereInput>
    allergies?: XOR<AllergiesRelationFilter, AllergiesWhereInput>
  }

  export type ProductsAllergiesOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
    products?: ProductsOrderByWithRelationInput
    allergies?: AllergiesOrderByWithRelationInput
  }

  export type ProductsAllergiesWhereUniqueInput = {
    id?: number
  }

  export type ProductsAllergiesOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
    _count?: ProductsAllergiesCountOrderByAggregateInput
    _avg?: ProductsAllergiesAvgOrderByAggregateInput
    _max?: ProductsAllergiesMaxOrderByAggregateInput
    _min?: ProductsAllergiesMinOrderByAggregateInput
    _sum?: ProductsAllergiesSumOrderByAggregateInput
  }

  export type ProductsAllergiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductsAllergiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductsAllergiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductsAllergiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    allergy_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type NutritionsWhereInput = {
    AND?: Enumerable<NutritionsWhereInput>
    OR?: Enumerable<NutritionsWhereInput>
    NOT?: Enumerable<NutritionsWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    caffein?: FloatFilter | number
    fat?: FloatFilter | number
    sugar?: FloatFilter | number
    sodium?: FloatFilter | number
    products?: XOR<ProductsRelationFilter, ProductsWhereInput>
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type NutritionsOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    products?: ProductsOrderByWithRelationInput
    created_at?: SortOrder
  }

  export type NutritionsWhereUniqueInput = {
    id?: number
    product_id?: number
  }

  export type NutritionsOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    created_at?: SortOrder
    _count?: NutritionsCountOrderByAggregateInput
    _avg?: NutritionsAvgOrderByAggregateInput
    _max?: NutritionsMaxOrderByAggregateInput
    _min?: NutritionsMinOrderByAggregateInput
    _sum?: NutritionsSumOrderByAggregateInput
  }

  export type NutritionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NutritionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<NutritionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NutritionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    caffein?: FloatWithAggregatesFilter | number
    fat?: FloatWithAggregatesFilter | number
    sugar?: FloatWithAggregatesFilter | number
    sodium?: FloatWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    username?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    phone_number?: StringNullableFilter | string | null
    policy_agreed?: BoolFilter | boolean
    created_at?: DateTimeNullableFilter | Date | string | null
    ProductsLikes?: ProductsLikesListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    ProductsLikes?: ProductsLikesOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    username?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    phone_number?: StringNullableWithAggregatesFilter | string | null
    policy_agreed?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ProductsLikesWhereInput = {
    AND?: Enumerable<ProductsLikesWhereInput>
    OR?: Enumerable<ProductsLikesWhereInput>
    NOT?: Enumerable<ProductsLikesWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    user_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    products?: XOR<ProductsRelationFilter, ProductsWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type ProductsLikesOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    products?: ProductsOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type ProductsLikesWhereUniqueInput = {
    id?: number
  }

  export type ProductsLikesOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    _count?: ProductsLikesCountOrderByAggregateInput
    _avg?: ProductsLikesAvgOrderByAggregateInput
    _max?: ProductsLikesMaxOrderByAggregateInput
    _min?: ProductsLikesMinOrderByAggregateInput
    _sum?: ProductsLikesSumOrderByAggregateInput
  }

  export type ProductsLikesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductsLikesScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductsLikesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductsLikesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type CategoriesCreateInput = {
    name: string
    created_at?: Date | string | null
    Products?: ProductsCreateNestedManyWithoutCategoriesInput
  }

  export type CategoriesUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string | null
    Products?: ProductsUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Products?: ProductsUpdateManyWithoutCategoriesInput
  }

  export type CategoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Products?: ProductsUncheckedUpdateManyWithoutCategoriesInput
  }

  export type CategoriesCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string | null
  }

  export type CategoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsCreateInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    categories: CategoriesCreateNestedOneWithoutProductsInput
    ProductsImages?: ProductsImagesCreateNestedManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
    ProductsImages?: ProductsImagesUncheckedCreateNestedManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUncheckedCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedCreateNestedOneWithoutProductsInput
  }

  export type ProductsUpdateInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CategoriesUpdateOneRequiredWithoutProductsInput
    ProductsImages?: ProductsImagesUpdateManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUpdateOneWithoutProductsInput
  }

  export type ProductsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsImages?: ProductsImagesUncheckedUpdateManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUncheckedUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedUpdateOneWithoutProductsInput
  }

  export type ProductsCreateManyInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
  }

  export type ProductsUpdateManyMutationInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsImagesCreateInput = {
    image_url: string
    created_at?: Date | string | null
    products: ProductsCreateNestedOneWithoutProductsImagesInput
  }

  export type ProductsImagesUncheckedCreateInput = {
    id?: number
    image_url: string
    product_id: number
    created_at?: Date | string | null
  }

  export type ProductsImagesUpdateInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: ProductsUpdateOneRequiredWithoutProductsImagesInput
  }

  export type ProductsImagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsImagesCreateManyInput = {
    id?: number
    image_url: string
    product_id: number
    created_at?: Date | string | null
  }

  export type ProductsImagesUpdateManyMutationInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsImagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AllergiesCreateInput = {
    name: string
    created_at?: Date | string | null
    ProductsAllergies?: ProductsAllergiesCreateNestedManyWithoutAllergiesInput
  }

  export type AllergiesUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string | null
    ProductsAllergies?: ProductsAllergiesUncheckedCreateNestedManyWithoutAllergiesInput
  }

  export type AllergiesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsAllergies?: ProductsAllergiesUpdateManyWithoutAllergiesInput
  }

  export type AllergiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsAllergies?: ProductsAllergiesUncheckedUpdateManyWithoutAllergiesInput
  }

  export type AllergiesCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string | null
  }

  export type AllergiesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AllergiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsAllergiesCreateInput = {
    created_at?: Date | string | null
    products: ProductsCreateNestedOneWithoutProductsAllergiesInput
    allergies: AllergiesCreateNestedOneWithoutProductsAllergiesInput
  }

  export type ProductsAllergiesUncheckedCreateInput = {
    id?: number
    product_id: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type ProductsAllergiesUpdateInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: ProductsUpdateOneRequiredWithoutProductsAllergiesInput
    allergies?: AllergiesUpdateOneRequiredWithoutProductsAllergiesInput
  }

  export type ProductsAllergiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsAllergiesCreateManyInput = {
    id?: number
    product_id: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type ProductsAllergiesUpdateManyMutationInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsAllergiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NutritionsCreateInput = {
    caffein: number
    fat: number
    sugar: number
    sodium: number
    products: ProductsCreateNestedOneWithoutNutritionsInput
    created_at?: Date | string | null
  }

  export type NutritionsUncheckedCreateInput = {
    id?: number
    product_id: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
    created_at?: Date | string | null
  }

  export type NutritionsUpdateInput = {
    caffein?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    sugar?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    products?: ProductsUpdateOneRequiredWithoutNutritionsInput
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NutritionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    caffein?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    sugar?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NutritionsCreateManyInput = {
    id?: number
    product_id: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
    created_at?: Date | string | null
  }

  export type NutritionsUpdateManyMutationInput = {
    caffein?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    sugar?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NutritionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    caffein?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    sugar?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersCreateInput = {
    email: string
    password: string
    username?: string | null
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string | null
    ProductsLikes?: ProductsLikesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    username?: string | null
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string | null
    ProductsLikes?: ProductsLikesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsLikes?: ProductsLikesUpdateManyWithoutUsersInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsLikes?: ProductsLikesUncheckedUpdateManyWithoutUsersInput
  }

  export type UsersCreateManyInput = {
    id?: number
    email: string
    password: string
    username?: string | null
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string | null
  }

  export type UsersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsLikesCreateInput = {
    created_at?: Date | string | null
    products: ProductsCreateNestedOneWithoutProductsLikesInput
    users: UsersCreateNestedOneWithoutProductsLikesInput
  }

  export type ProductsLikesUncheckedCreateInput = {
    id?: number
    product_id: number
    user_id: number
    created_at?: Date | string | null
  }

  export type ProductsLikesUpdateInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: ProductsUpdateOneRequiredWithoutProductsLikesInput
    users?: UsersUpdateOneRequiredWithoutProductsLikesInput
  }

  export type ProductsLikesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsLikesCreateManyInput = {
    id?: number
    product_id: number
    user_id: number
    created_at?: Date | string | null
  }

  export type ProductsLikesUpdateManyMutationInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsLikesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type ProductsListRelationFilter = {
    every?: ProductsWhereInput
    some?: ProductsWhereInput
    none?: ProductsWhereInput
  }

  export type ProductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type CategoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type CategoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type CategoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type CategoriesRelationFilter = {
    is?: CategoriesWhereInput
    isNot?: CategoriesWhereInput
  }

  export type ProductsImagesListRelationFilter = {
    every?: ProductsImagesWhereInput
    some?: ProductsImagesWhereInput
    none?: ProductsImagesWhereInput
  }

  export type ProductsAllergiesListRelationFilter = {
    every?: ProductsAllergiesWhereInput
    some?: ProductsAllergiesWhereInput
    none?: ProductsAllergiesWhereInput
  }

  export type ProductsLikesListRelationFilter = {
    every?: ProductsLikesWhereInput
    some?: ProductsLikesWhereInput
    none?: ProductsLikesWhereInput
  }

  export type NutritionsRelationFilter = {
    is?: NutritionsWhereInput | null
    isNot?: NutritionsWhereInput | null
  }

  export type ProductsImagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductsAllergiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductsLikesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductsCountOrderByAggregateInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsAvgOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
  }

  export type ProductsMaxOrderByAggregateInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsMinOrderByAggregateInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsSumOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ProductsRelationFilter = {
    is?: ProductsWhereInput
    isNot?: ProductsWhereInput
  }

  export type ProductsImagesCountOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsImagesAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type ProductsImagesMaxOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsImagesMinOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsImagesSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type AllergiesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type AllergiesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AllergiesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type AllergiesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type AllergiesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AllergiesRelationFilter = {
    is?: AllergiesWhereInput
    isNot?: AllergiesWhereInput
  }

  export type ProductsAllergiesCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsAllergiesAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
  }

  export type ProductsAllergiesMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsAllergiesMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsAllergiesSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NutritionsCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    created_at?: SortOrder
  }

  export type NutritionsAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
  }

  export type NutritionsMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    created_at?: SortOrder
  }

  export type NutritionsMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    created_at?: SortOrder
  }

  export type NutritionsSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type ProductsLikesCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsLikesAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
  }

  export type ProductsLikesMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsLikesMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductsLikesSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    user_id?: SortOrder
  }

  export type ProductsCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutCategoriesInput>, Enumerable<ProductsUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutCategoriesInput>
    createMany?: ProductsCreateManyCategoriesInputEnvelope
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type ProductsUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutCategoriesInput>, Enumerable<ProductsUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutCategoriesInput>
    createMany?: ProductsCreateManyCategoriesInputEnvelope
    connect?: Enumerable<ProductsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProductsUpdateManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutCategoriesInput>, Enumerable<ProductsUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: ProductsCreateManyCategoriesInputEnvelope
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductsUncheckedUpdateManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<ProductsCreateWithoutCategoriesInput>, Enumerable<ProductsUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<ProductsCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<ProductsUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: ProductsCreateManyCategoriesInputEnvelope
    set?: Enumerable<ProductsWhereUniqueInput>
    disconnect?: Enumerable<ProductsWhereUniqueInput>
    delete?: Enumerable<ProductsWhereUniqueInput>
    connect?: Enumerable<ProductsWhereUniqueInput>
    update?: Enumerable<ProductsUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<ProductsUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<ProductsScalarWhereInput>
  }

  export type CategoriesCreateNestedOneWithoutProductsInput = {
    create?: XOR<CategoriesCreateWithoutProductsInput, CategoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutProductsInput
    connect?: CategoriesWhereUniqueInput
  }

  export type ProductsImagesCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsImagesCreateWithoutProductsInput>, Enumerable<ProductsImagesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsImagesCreateOrConnectWithoutProductsInput>
    createMany?: ProductsImagesCreateManyProductsInputEnvelope
    connect?: Enumerable<ProductsImagesWhereUniqueInput>
  }

  export type ProductsAllergiesCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsAllergiesCreateWithoutProductsInput>, Enumerable<ProductsAllergiesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsAllergiesCreateOrConnectWithoutProductsInput>
    createMany?: ProductsAllergiesCreateManyProductsInputEnvelope
    connect?: Enumerable<ProductsAllergiesWhereUniqueInput>
  }

  export type ProductsLikesCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsLikesCreateWithoutProductsInput>, Enumerable<ProductsLikesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsLikesCreateOrConnectWithoutProductsInput>
    createMany?: ProductsLikesCreateManyProductsInputEnvelope
    connect?: Enumerable<ProductsLikesWhereUniqueInput>
  }

  export type NutritionsCreateNestedOneWithoutProductsInput = {
    create?: XOR<NutritionsCreateWithoutProductsInput, NutritionsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: NutritionsCreateOrConnectWithoutProductsInput
    connect?: NutritionsWhereUniqueInput
  }

  export type ProductsImagesUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsImagesCreateWithoutProductsInput>, Enumerable<ProductsImagesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsImagesCreateOrConnectWithoutProductsInput>
    createMany?: ProductsImagesCreateManyProductsInputEnvelope
    connect?: Enumerable<ProductsImagesWhereUniqueInput>
  }

  export type ProductsAllergiesUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsAllergiesCreateWithoutProductsInput>, Enumerable<ProductsAllergiesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsAllergiesCreateOrConnectWithoutProductsInput>
    createMany?: ProductsAllergiesCreateManyProductsInputEnvelope
    connect?: Enumerable<ProductsAllergiesWhereUniqueInput>
  }

  export type ProductsLikesUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsLikesCreateWithoutProductsInput>, Enumerable<ProductsLikesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsLikesCreateOrConnectWithoutProductsInput>
    createMany?: ProductsLikesCreateManyProductsInputEnvelope
    connect?: Enumerable<ProductsLikesWhereUniqueInput>
  }

  export type NutritionsUncheckedCreateNestedOneWithoutProductsInput = {
    create?: XOR<NutritionsCreateWithoutProductsInput, NutritionsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: NutritionsCreateOrConnectWithoutProductsInput
    connect?: NutritionsWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CategoriesUpdateOneRequiredWithoutProductsInput = {
    create?: XOR<CategoriesCreateWithoutProductsInput, CategoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutProductsInput
    upsert?: CategoriesUpsertWithoutProductsInput
    connect?: CategoriesWhereUniqueInput
    update?: XOR<CategoriesUpdateWithoutProductsInput, CategoriesUncheckedUpdateWithoutProductsInput>
  }

  export type ProductsImagesUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsImagesCreateWithoutProductsInput>, Enumerable<ProductsImagesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsImagesCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<ProductsImagesUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: ProductsImagesCreateManyProductsInputEnvelope
    set?: Enumerable<ProductsImagesWhereUniqueInput>
    disconnect?: Enumerable<ProductsImagesWhereUniqueInput>
    delete?: Enumerable<ProductsImagesWhereUniqueInput>
    connect?: Enumerable<ProductsImagesWhereUniqueInput>
    update?: Enumerable<ProductsImagesUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<ProductsImagesUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<ProductsImagesScalarWhereInput>
  }

  export type ProductsAllergiesUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsAllergiesCreateWithoutProductsInput>, Enumerable<ProductsAllergiesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsAllergiesCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<ProductsAllergiesUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: ProductsAllergiesCreateManyProductsInputEnvelope
    set?: Enumerable<ProductsAllergiesWhereUniqueInput>
    disconnect?: Enumerable<ProductsAllergiesWhereUniqueInput>
    delete?: Enumerable<ProductsAllergiesWhereUniqueInput>
    connect?: Enumerable<ProductsAllergiesWhereUniqueInput>
    update?: Enumerable<ProductsAllergiesUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<ProductsAllergiesUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<ProductsAllergiesScalarWhereInput>
  }

  export type ProductsLikesUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsLikesCreateWithoutProductsInput>, Enumerable<ProductsLikesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsLikesCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<ProductsLikesUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: ProductsLikesCreateManyProductsInputEnvelope
    set?: Enumerable<ProductsLikesWhereUniqueInput>
    disconnect?: Enumerable<ProductsLikesWhereUniqueInput>
    delete?: Enumerable<ProductsLikesWhereUniqueInput>
    connect?: Enumerable<ProductsLikesWhereUniqueInput>
    update?: Enumerable<ProductsLikesUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<ProductsLikesUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<ProductsLikesScalarWhereInput>
  }

  export type NutritionsUpdateOneWithoutProductsInput = {
    create?: XOR<NutritionsCreateWithoutProductsInput, NutritionsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: NutritionsCreateOrConnectWithoutProductsInput
    upsert?: NutritionsUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: boolean
    connect?: NutritionsWhereUniqueInput
    update?: XOR<NutritionsUpdateWithoutProductsInput, NutritionsUncheckedUpdateWithoutProductsInput>
  }

  export type ProductsImagesUncheckedUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsImagesCreateWithoutProductsInput>, Enumerable<ProductsImagesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsImagesCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<ProductsImagesUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: ProductsImagesCreateManyProductsInputEnvelope
    set?: Enumerable<ProductsImagesWhereUniqueInput>
    disconnect?: Enumerable<ProductsImagesWhereUniqueInput>
    delete?: Enumerable<ProductsImagesWhereUniqueInput>
    connect?: Enumerable<ProductsImagesWhereUniqueInput>
    update?: Enumerable<ProductsImagesUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<ProductsImagesUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<ProductsImagesScalarWhereInput>
  }

  export type ProductsAllergiesUncheckedUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsAllergiesCreateWithoutProductsInput>, Enumerable<ProductsAllergiesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsAllergiesCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<ProductsAllergiesUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: ProductsAllergiesCreateManyProductsInputEnvelope
    set?: Enumerable<ProductsAllergiesWhereUniqueInput>
    disconnect?: Enumerable<ProductsAllergiesWhereUniqueInput>
    delete?: Enumerable<ProductsAllergiesWhereUniqueInput>
    connect?: Enumerable<ProductsAllergiesWhereUniqueInput>
    update?: Enumerable<ProductsAllergiesUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<ProductsAllergiesUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<ProductsAllergiesScalarWhereInput>
  }

  export type ProductsLikesUncheckedUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<ProductsLikesCreateWithoutProductsInput>, Enumerable<ProductsLikesUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<ProductsLikesCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<ProductsLikesUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: ProductsLikesCreateManyProductsInputEnvelope
    set?: Enumerable<ProductsLikesWhereUniqueInput>
    disconnect?: Enumerable<ProductsLikesWhereUniqueInput>
    delete?: Enumerable<ProductsLikesWhereUniqueInput>
    connect?: Enumerable<ProductsLikesWhereUniqueInput>
    update?: Enumerable<ProductsLikesUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<ProductsLikesUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<ProductsLikesScalarWhereInput>
  }

  export type NutritionsUncheckedUpdateOneWithoutProductsInput = {
    create?: XOR<NutritionsCreateWithoutProductsInput, NutritionsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: NutritionsCreateOrConnectWithoutProductsInput
    upsert?: NutritionsUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: boolean
    connect?: NutritionsWhereUniqueInput
    update?: XOR<NutritionsUpdateWithoutProductsInput, NutritionsUncheckedUpdateWithoutProductsInput>
  }

  export type ProductsCreateNestedOneWithoutProductsImagesInput = {
    create?: XOR<ProductsCreateWithoutProductsImagesInput, ProductsUncheckedCreateWithoutProductsImagesInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutProductsImagesInput
    connect?: ProductsWhereUniqueInput
  }

  export type ProductsUpdateOneRequiredWithoutProductsImagesInput = {
    create?: XOR<ProductsCreateWithoutProductsImagesInput, ProductsUncheckedCreateWithoutProductsImagesInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutProductsImagesInput
    upsert?: ProductsUpsertWithoutProductsImagesInput
    connect?: ProductsWhereUniqueInput
    update?: XOR<ProductsUpdateWithoutProductsImagesInput, ProductsUncheckedUpdateWithoutProductsImagesInput>
  }

  export type ProductsAllergiesCreateNestedManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<ProductsAllergiesCreateWithoutAllergiesInput>, Enumerable<ProductsAllergiesUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<ProductsAllergiesCreateOrConnectWithoutAllergiesInput>
    createMany?: ProductsAllergiesCreateManyAllergiesInputEnvelope
    connect?: Enumerable<ProductsAllergiesWhereUniqueInput>
  }

  export type ProductsAllergiesUncheckedCreateNestedManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<ProductsAllergiesCreateWithoutAllergiesInput>, Enumerable<ProductsAllergiesUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<ProductsAllergiesCreateOrConnectWithoutAllergiesInput>
    createMany?: ProductsAllergiesCreateManyAllergiesInputEnvelope
    connect?: Enumerable<ProductsAllergiesWhereUniqueInput>
  }

  export type ProductsAllergiesUpdateManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<ProductsAllergiesCreateWithoutAllergiesInput>, Enumerable<ProductsAllergiesUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<ProductsAllergiesCreateOrConnectWithoutAllergiesInput>
    upsert?: Enumerable<ProductsAllergiesUpsertWithWhereUniqueWithoutAllergiesInput>
    createMany?: ProductsAllergiesCreateManyAllergiesInputEnvelope
    set?: Enumerable<ProductsAllergiesWhereUniqueInput>
    disconnect?: Enumerable<ProductsAllergiesWhereUniqueInput>
    delete?: Enumerable<ProductsAllergiesWhereUniqueInput>
    connect?: Enumerable<ProductsAllergiesWhereUniqueInput>
    update?: Enumerable<ProductsAllergiesUpdateWithWhereUniqueWithoutAllergiesInput>
    updateMany?: Enumerable<ProductsAllergiesUpdateManyWithWhereWithoutAllergiesInput>
    deleteMany?: Enumerable<ProductsAllergiesScalarWhereInput>
  }

  export type ProductsAllergiesUncheckedUpdateManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<ProductsAllergiesCreateWithoutAllergiesInput>, Enumerable<ProductsAllergiesUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<ProductsAllergiesCreateOrConnectWithoutAllergiesInput>
    upsert?: Enumerable<ProductsAllergiesUpsertWithWhereUniqueWithoutAllergiesInput>
    createMany?: ProductsAllergiesCreateManyAllergiesInputEnvelope
    set?: Enumerable<ProductsAllergiesWhereUniqueInput>
    disconnect?: Enumerable<ProductsAllergiesWhereUniqueInput>
    delete?: Enumerable<ProductsAllergiesWhereUniqueInput>
    connect?: Enumerable<ProductsAllergiesWhereUniqueInput>
    update?: Enumerable<ProductsAllergiesUpdateWithWhereUniqueWithoutAllergiesInput>
    updateMany?: Enumerable<ProductsAllergiesUpdateManyWithWhereWithoutAllergiesInput>
    deleteMany?: Enumerable<ProductsAllergiesScalarWhereInput>
  }

  export type ProductsCreateNestedOneWithoutProductsAllergiesInput = {
    create?: XOR<ProductsCreateWithoutProductsAllergiesInput, ProductsUncheckedCreateWithoutProductsAllergiesInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutProductsAllergiesInput
    connect?: ProductsWhereUniqueInput
  }

  export type AllergiesCreateNestedOneWithoutProductsAllergiesInput = {
    create?: XOR<AllergiesCreateWithoutProductsAllergiesInput, AllergiesUncheckedCreateWithoutProductsAllergiesInput>
    connectOrCreate?: AllergiesCreateOrConnectWithoutProductsAllergiesInput
    connect?: AllergiesWhereUniqueInput
  }

  export type ProductsUpdateOneRequiredWithoutProductsAllergiesInput = {
    create?: XOR<ProductsCreateWithoutProductsAllergiesInput, ProductsUncheckedCreateWithoutProductsAllergiesInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutProductsAllergiesInput
    upsert?: ProductsUpsertWithoutProductsAllergiesInput
    connect?: ProductsWhereUniqueInput
    update?: XOR<ProductsUpdateWithoutProductsAllergiesInput, ProductsUncheckedUpdateWithoutProductsAllergiesInput>
  }

  export type AllergiesUpdateOneRequiredWithoutProductsAllergiesInput = {
    create?: XOR<AllergiesCreateWithoutProductsAllergiesInput, AllergiesUncheckedCreateWithoutProductsAllergiesInput>
    connectOrCreate?: AllergiesCreateOrConnectWithoutProductsAllergiesInput
    upsert?: AllergiesUpsertWithoutProductsAllergiesInput
    connect?: AllergiesWhereUniqueInput
    update?: XOR<AllergiesUpdateWithoutProductsAllergiesInput, AllergiesUncheckedUpdateWithoutProductsAllergiesInput>
  }

  export type ProductsCreateNestedOneWithoutNutritionsInput = {
    create?: XOR<ProductsCreateWithoutNutritionsInput, ProductsUncheckedCreateWithoutNutritionsInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutNutritionsInput
    connect?: ProductsWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductsUpdateOneRequiredWithoutNutritionsInput = {
    create?: XOR<ProductsCreateWithoutNutritionsInput, ProductsUncheckedCreateWithoutNutritionsInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutNutritionsInput
    upsert?: ProductsUpsertWithoutNutritionsInput
    connect?: ProductsWhereUniqueInput
    update?: XOR<ProductsUpdateWithoutNutritionsInput, ProductsUncheckedUpdateWithoutNutritionsInput>
  }

  export type ProductsLikesCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ProductsLikesCreateWithoutUsersInput>, Enumerable<ProductsLikesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ProductsLikesCreateOrConnectWithoutUsersInput>
    createMany?: ProductsLikesCreateManyUsersInputEnvelope
    connect?: Enumerable<ProductsLikesWhereUniqueInput>
  }

  export type ProductsLikesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ProductsLikesCreateWithoutUsersInput>, Enumerable<ProductsLikesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ProductsLikesCreateOrConnectWithoutUsersInput>
    createMany?: ProductsLikesCreateManyUsersInputEnvelope
    connect?: Enumerable<ProductsLikesWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProductsLikesUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<ProductsLikesCreateWithoutUsersInput>, Enumerable<ProductsLikesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ProductsLikesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<ProductsLikesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: ProductsLikesCreateManyUsersInputEnvelope
    set?: Enumerable<ProductsLikesWhereUniqueInput>
    disconnect?: Enumerable<ProductsLikesWhereUniqueInput>
    delete?: Enumerable<ProductsLikesWhereUniqueInput>
    connect?: Enumerable<ProductsLikesWhereUniqueInput>
    update?: Enumerable<ProductsLikesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ProductsLikesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ProductsLikesScalarWhereInput>
  }

  export type ProductsLikesUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<ProductsLikesCreateWithoutUsersInput>, Enumerable<ProductsLikesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ProductsLikesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<ProductsLikesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: ProductsLikesCreateManyUsersInputEnvelope
    set?: Enumerable<ProductsLikesWhereUniqueInput>
    disconnect?: Enumerable<ProductsLikesWhereUniqueInput>
    delete?: Enumerable<ProductsLikesWhereUniqueInput>
    connect?: Enumerable<ProductsLikesWhereUniqueInput>
    update?: Enumerable<ProductsLikesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ProductsLikesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ProductsLikesScalarWhereInput>
  }

  export type ProductsCreateNestedOneWithoutProductsLikesInput = {
    create?: XOR<ProductsCreateWithoutProductsLikesInput, ProductsUncheckedCreateWithoutProductsLikesInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutProductsLikesInput
    connect?: ProductsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutProductsLikesInput = {
    create?: XOR<UsersCreateWithoutProductsLikesInput, UsersUncheckedCreateWithoutProductsLikesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutProductsLikesInput
    connect?: UsersWhereUniqueInput
  }

  export type ProductsUpdateOneRequiredWithoutProductsLikesInput = {
    create?: XOR<ProductsCreateWithoutProductsLikesInput, ProductsUncheckedCreateWithoutProductsLikesInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutProductsLikesInput
    upsert?: ProductsUpsertWithoutProductsLikesInput
    connect?: ProductsWhereUniqueInput
    update?: XOR<ProductsUpdateWithoutProductsLikesInput, ProductsUncheckedUpdateWithoutProductsLikesInput>
  }

  export type UsersUpdateOneRequiredWithoutProductsLikesInput = {
    create?: XOR<UsersCreateWithoutProductsLikesInput, UsersUncheckedCreateWithoutProductsLikesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutProductsLikesInput
    upsert?: UsersUpsertWithoutProductsLikesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutProductsLikesInput, UsersUncheckedUpdateWithoutProductsLikesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ProductsCreateWithoutCategoriesInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    ProductsImages?: ProductsImagesCreateNestedManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateWithoutCategoriesInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    ProductsImages?: ProductsImagesUncheckedCreateNestedManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUncheckedCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedCreateNestedOneWithoutProductsInput
  }

  export type ProductsCreateOrConnectWithoutCategoriesInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutCategoriesInput, ProductsUncheckedCreateWithoutCategoriesInput>
  }

  export type ProductsCreateManyCategoriesInputEnvelope = {
    data: Enumerable<ProductsCreateManyCategoriesInput>
    skipDuplicates?: boolean
  }

  export type ProductsUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: ProductsWhereUniqueInput
    update: XOR<ProductsUpdateWithoutCategoriesInput, ProductsUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ProductsCreateWithoutCategoriesInput, ProductsUncheckedCreateWithoutCategoriesInput>
  }

  export type ProductsUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: ProductsWhereUniqueInput
    data: XOR<ProductsUpdateWithoutCategoriesInput, ProductsUncheckedUpdateWithoutCategoriesInput>
  }

  export type ProductsUpdateManyWithWhereWithoutCategoriesInput = {
    where: ProductsScalarWhereInput
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyWithoutProductsInput>
  }

  export type ProductsScalarWhereInput = {
    AND?: Enumerable<ProductsScalarWhereInput>
    OR?: Enumerable<ProductsScalarWhereInput>
    NOT?: Enumerable<ProductsScalarWhereInput>
    id?: IntFilter | number
    korean_name?: StringFilter | string
    english_name?: StringNullableFilter | string | null
    category_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type CategoriesCreateWithoutProductsInput = {
    name: string
    created_at?: Date | string | null
  }

  export type CategoriesUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    created_at?: Date | string | null
  }

  export type CategoriesCreateOrConnectWithoutProductsInput = {
    where: CategoriesWhereUniqueInput
    create: XOR<CategoriesCreateWithoutProductsInput, CategoriesUncheckedCreateWithoutProductsInput>
  }

  export type ProductsImagesCreateWithoutProductsInput = {
    image_url: string
    created_at?: Date | string | null
  }

  export type ProductsImagesUncheckedCreateWithoutProductsInput = {
    id?: number
    image_url: string
    created_at?: Date | string | null
  }

  export type ProductsImagesCreateOrConnectWithoutProductsInput = {
    where: ProductsImagesWhereUniqueInput
    create: XOR<ProductsImagesCreateWithoutProductsInput, ProductsImagesUncheckedCreateWithoutProductsInput>
  }

  export type ProductsImagesCreateManyProductsInputEnvelope = {
    data: Enumerable<ProductsImagesCreateManyProductsInput>
    skipDuplicates?: boolean
  }

  export type ProductsAllergiesCreateWithoutProductsInput = {
    created_at?: Date | string | null
    allergies: AllergiesCreateNestedOneWithoutProductsAllergiesInput
  }

  export type ProductsAllergiesUncheckedCreateWithoutProductsInput = {
    id?: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type ProductsAllergiesCreateOrConnectWithoutProductsInput = {
    where: ProductsAllergiesWhereUniqueInput
    create: XOR<ProductsAllergiesCreateWithoutProductsInput, ProductsAllergiesUncheckedCreateWithoutProductsInput>
  }

  export type ProductsAllergiesCreateManyProductsInputEnvelope = {
    data: Enumerable<ProductsAllergiesCreateManyProductsInput>
    skipDuplicates?: boolean
  }

  export type ProductsLikesCreateWithoutProductsInput = {
    created_at?: Date | string | null
    users: UsersCreateNestedOneWithoutProductsLikesInput
  }

  export type ProductsLikesUncheckedCreateWithoutProductsInput = {
    id?: number
    user_id: number
    created_at?: Date | string | null
  }

  export type ProductsLikesCreateOrConnectWithoutProductsInput = {
    where: ProductsLikesWhereUniqueInput
    create: XOR<ProductsLikesCreateWithoutProductsInput, ProductsLikesUncheckedCreateWithoutProductsInput>
  }

  export type ProductsLikesCreateManyProductsInputEnvelope = {
    data: Enumerable<ProductsLikesCreateManyProductsInput>
    skipDuplicates?: boolean
  }

  export type NutritionsCreateWithoutProductsInput = {
    caffein: number
    fat: number
    sugar: number
    sodium: number
    created_at?: Date | string | null
  }

  export type NutritionsUncheckedCreateWithoutProductsInput = {
    id?: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
    created_at?: Date | string | null
  }

  export type NutritionsCreateOrConnectWithoutProductsInput = {
    where: NutritionsWhereUniqueInput
    create: XOR<NutritionsCreateWithoutProductsInput, NutritionsUncheckedCreateWithoutProductsInput>
  }

  export type CategoriesUpsertWithoutProductsInput = {
    update: XOR<CategoriesUpdateWithoutProductsInput, CategoriesUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoriesCreateWithoutProductsInput, CategoriesUncheckedCreateWithoutProductsInput>
  }

  export type CategoriesUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoriesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsImagesUpsertWithWhereUniqueWithoutProductsInput = {
    where: ProductsImagesWhereUniqueInput
    update: XOR<ProductsImagesUpdateWithoutProductsInput, ProductsImagesUncheckedUpdateWithoutProductsInput>
    create: XOR<ProductsImagesCreateWithoutProductsInput, ProductsImagesUncheckedCreateWithoutProductsInput>
  }

  export type ProductsImagesUpdateWithWhereUniqueWithoutProductsInput = {
    where: ProductsImagesWhereUniqueInput
    data: XOR<ProductsImagesUpdateWithoutProductsInput, ProductsImagesUncheckedUpdateWithoutProductsInput>
  }

  export type ProductsImagesUpdateManyWithWhereWithoutProductsInput = {
    where: ProductsImagesScalarWhereInput
    data: XOR<ProductsImagesUpdateManyMutationInput, ProductsImagesUncheckedUpdateManyWithoutProductsImagesInput>
  }

  export type ProductsImagesScalarWhereInput = {
    AND?: Enumerable<ProductsImagesScalarWhereInput>
    OR?: Enumerable<ProductsImagesScalarWhereInput>
    NOT?: Enumerable<ProductsImagesScalarWhereInput>
    id?: IntFilter | number
    image_url?: StringFilter | string
    product_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type ProductsAllergiesUpsertWithWhereUniqueWithoutProductsInput = {
    where: ProductsAllergiesWhereUniqueInput
    update: XOR<ProductsAllergiesUpdateWithoutProductsInput, ProductsAllergiesUncheckedUpdateWithoutProductsInput>
    create: XOR<ProductsAllergiesCreateWithoutProductsInput, ProductsAllergiesUncheckedCreateWithoutProductsInput>
  }

  export type ProductsAllergiesUpdateWithWhereUniqueWithoutProductsInput = {
    where: ProductsAllergiesWhereUniqueInput
    data: XOR<ProductsAllergiesUpdateWithoutProductsInput, ProductsAllergiesUncheckedUpdateWithoutProductsInput>
  }

  export type ProductsAllergiesUpdateManyWithWhereWithoutProductsInput = {
    where: ProductsAllergiesScalarWhereInput
    data: XOR<ProductsAllergiesUpdateManyMutationInput, ProductsAllergiesUncheckedUpdateManyWithoutProductsAllergiesInput>
  }

  export type ProductsAllergiesScalarWhereInput = {
    AND?: Enumerable<ProductsAllergiesScalarWhereInput>
    OR?: Enumerable<ProductsAllergiesScalarWhereInput>
    NOT?: Enumerable<ProductsAllergiesScalarWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    allergy_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type ProductsLikesUpsertWithWhereUniqueWithoutProductsInput = {
    where: ProductsLikesWhereUniqueInput
    update: XOR<ProductsLikesUpdateWithoutProductsInput, ProductsLikesUncheckedUpdateWithoutProductsInput>
    create: XOR<ProductsLikesCreateWithoutProductsInput, ProductsLikesUncheckedCreateWithoutProductsInput>
  }

  export type ProductsLikesUpdateWithWhereUniqueWithoutProductsInput = {
    where: ProductsLikesWhereUniqueInput
    data: XOR<ProductsLikesUpdateWithoutProductsInput, ProductsLikesUncheckedUpdateWithoutProductsInput>
  }

  export type ProductsLikesUpdateManyWithWhereWithoutProductsInput = {
    where: ProductsLikesScalarWhereInput
    data: XOR<ProductsLikesUpdateManyMutationInput, ProductsLikesUncheckedUpdateManyWithoutProductsLikesInput>
  }

  export type ProductsLikesScalarWhereInput = {
    AND?: Enumerable<ProductsLikesScalarWhereInput>
    OR?: Enumerable<ProductsLikesScalarWhereInput>
    NOT?: Enumerable<ProductsLikesScalarWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    user_id?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
  }

  export type NutritionsUpsertWithoutProductsInput = {
    update: XOR<NutritionsUpdateWithoutProductsInput, NutritionsUncheckedUpdateWithoutProductsInput>
    create: XOR<NutritionsCreateWithoutProductsInput, NutritionsUncheckedCreateWithoutProductsInput>
  }

  export type NutritionsUpdateWithoutProductsInput = {
    caffein?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    sugar?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NutritionsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    caffein?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    sugar?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsCreateWithoutProductsImagesInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    categories: CategoriesCreateNestedOneWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateWithoutProductsImagesInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
    ProductsAllergies?: ProductsAllergiesUncheckedCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedCreateNestedOneWithoutProductsInput
  }

  export type ProductsCreateOrConnectWithoutProductsImagesInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutProductsImagesInput, ProductsUncheckedCreateWithoutProductsImagesInput>
  }

  export type ProductsUpsertWithoutProductsImagesInput = {
    update: XOR<ProductsUpdateWithoutProductsImagesInput, ProductsUncheckedUpdateWithoutProductsImagesInput>
    create: XOR<ProductsCreateWithoutProductsImagesInput, ProductsUncheckedCreateWithoutProductsImagesInput>
  }

  export type ProductsUpdateWithoutProductsImagesInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CategoriesUpdateOneRequiredWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUpdateOneWithoutProductsInput
  }

  export type ProductsUncheckedUpdateWithoutProductsImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsAllergies?: ProductsAllergiesUncheckedUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedUpdateOneWithoutProductsInput
  }

  export type ProductsAllergiesCreateWithoutAllergiesInput = {
    created_at?: Date | string | null
    products: ProductsCreateNestedOneWithoutProductsAllergiesInput
  }

  export type ProductsAllergiesUncheckedCreateWithoutAllergiesInput = {
    id?: number
    product_id: number
    created_at?: Date | string | null
  }

  export type ProductsAllergiesCreateOrConnectWithoutAllergiesInput = {
    where: ProductsAllergiesWhereUniqueInput
    create: XOR<ProductsAllergiesCreateWithoutAllergiesInput, ProductsAllergiesUncheckedCreateWithoutAllergiesInput>
  }

  export type ProductsAllergiesCreateManyAllergiesInputEnvelope = {
    data: Enumerable<ProductsAllergiesCreateManyAllergiesInput>
    skipDuplicates?: boolean
  }

  export type ProductsAllergiesUpsertWithWhereUniqueWithoutAllergiesInput = {
    where: ProductsAllergiesWhereUniqueInput
    update: XOR<ProductsAllergiesUpdateWithoutAllergiesInput, ProductsAllergiesUncheckedUpdateWithoutAllergiesInput>
    create: XOR<ProductsAllergiesCreateWithoutAllergiesInput, ProductsAllergiesUncheckedCreateWithoutAllergiesInput>
  }

  export type ProductsAllergiesUpdateWithWhereUniqueWithoutAllergiesInput = {
    where: ProductsAllergiesWhereUniqueInput
    data: XOR<ProductsAllergiesUpdateWithoutAllergiesInput, ProductsAllergiesUncheckedUpdateWithoutAllergiesInput>
  }

  export type ProductsAllergiesUpdateManyWithWhereWithoutAllergiesInput = {
    where: ProductsAllergiesScalarWhereInput
    data: XOR<ProductsAllergiesUpdateManyMutationInput, ProductsAllergiesUncheckedUpdateManyWithoutProductsAllergiesInput>
  }

  export type ProductsCreateWithoutProductsAllergiesInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    categories: CategoriesCreateNestedOneWithoutProductsInput
    ProductsImages?: ProductsImagesCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateWithoutProductsAllergiesInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
    ProductsImages?: ProductsImagesUncheckedCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedCreateNestedOneWithoutProductsInput
  }

  export type ProductsCreateOrConnectWithoutProductsAllergiesInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutProductsAllergiesInput, ProductsUncheckedCreateWithoutProductsAllergiesInput>
  }

  export type AllergiesCreateWithoutProductsAllergiesInput = {
    name: string
    created_at?: Date | string | null
  }

  export type AllergiesUncheckedCreateWithoutProductsAllergiesInput = {
    id?: number
    name: string
    created_at?: Date | string | null
  }

  export type AllergiesCreateOrConnectWithoutProductsAllergiesInput = {
    where: AllergiesWhereUniqueInput
    create: XOR<AllergiesCreateWithoutProductsAllergiesInput, AllergiesUncheckedCreateWithoutProductsAllergiesInput>
  }

  export type ProductsUpsertWithoutProductsAllergiesInput = {
    update: XOR<ProductsUpdateWithoutProductsAllergiesInput, ProductsUncheckedUpdateWithoutProductsAllergiesInput>
    create: XOR<ProductsCreateWithoutProductsAllergiesInput, ProductsUncheckedCreateWithoutProductsAllergiesInput>
  }

  export type ProductsUpdateWithoutProductsAllergiesInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CategoriesUpdateOneRequiredWithoutProductsInput
    ProductsImages?: ProductsImagesUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUpdateOneWithoutProductsInput
  }

  export type ProductsUncheckedUpdateWithoutProductsAllergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsImages?: ProductsImagesUncheckedUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedUpdateOneWithoutProductsInput
  }

  export type AllergiesUpsertWithoutProductsAllergiesInput = {
    update: XOR<AllergiesUpdateWithoutProductsAllergiesInput, AllergiesUncheckedUpdateWithoutProductsAllergiesInput>
    create: XOR<AllergiesCreateWithoutProductsAllergiesInput, AllergiesUncheckedCreateWithoutProductsAllergiesInput>
  }

  export type AllergiesUpdateWithoutProductsAllergiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AllergiesUncheckedUpdateWithoutProductsAllergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsCreateWithoutNutritionsInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    categories: CategoriesCreateNestedOneWithoutProductsInput
    ProductsImages?: ProductsImagesCreateNestedManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesCreateNestedManyWithoutProductsInput
  }

  export type ProductsUncheckedCreateWithoutNutritionsInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
    ProductsImages?: ProductsImagesUncheckedCreateNestedManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUncheckedCreateNestedManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedCreateNestedManyWithoutProductsInput
  }

  export type ProductsCreateOrConnectWithoutNutritionsInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutNutritionsInput, ProductsUncheckedCreateWithoutNutritionsInput>
  }

  export type ProductsUpsertWithoutNutritionsInput = {
    update: XOR<ProductsUpdateWithoutNutritionsInput, ProductsUncheckedUpdateWithoutNutritionsInput>
    create: XOR<ProductsCreateWithoutNutritionsInput, ProductsUncheckedCreateWithoutNutritionsInput>
  }

  export type ProductsUpdateWithoutNutritionsInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CategoriesUpdateOneRequiredWithoutProductsInput
    ProductsImages?: ProductsImagesUpdateManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUpdateManyWithoutProductsInput
  }

  export type ProductsUncheckedUpdateWithoutNutritionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsImages?: ProductsImagesUncheckedUpdateManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUncheckedUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedUpdateManyWithoutProductsInput
  }

  export type ProductsLikesCreateWithoutUsersInput = {
    created_at?: Date | string | null
    products: ProductsCreateNestedOneWithoutProductsLikesInput
  }

  export type ProductsLikesUncheckedCreateWithoutUsersInput = {
    id?: number
    product_id: number
    created_at?: Date | string | null
  }

  export type ProductsLikesCreateOrConnectWithoutUsersInput = {
    where: ProductsLikesWhereUniqueInput
    create: XOR<ProductsLikesCreateWithoutUsersInput, ProductsLikesUncheckedCreateWithoutUsersInput>
  }

  export type ProductsLikesCreateManyUsersInputEnvelope = {
    data: Enumerable<ProductsLikesCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type ProductsLikesUpsertWithWhereUniqueWithoutUsersInput = {
    where: ProductsLikesWhereUniqueInput
    update: XOR<ProductsLikesUpdateWithoutUsersInput, ProductsLikesUncheckedUpdateWithoutUsersInput>
    create: XOR<ProductsLikesCreateWithoutUsersInput, ProductsLikesUncheckedCreateWithoutUsersInput>
  }

  export type ProductsLikesUpdateWithWhereUniqueWithoutUsersInput = {
    where: ProductsLikesWhereUniqueInput
    data: XOR<ProductsLikesUpdateWithoutUsersInput, ProductsLikesUncheckedUpdateWithoutUsersInput>
  }

  export type ProductsLikesUpdateManyWithWhereWithoutUsersInput = {
    where: ProductsLikesScalarWhereInput
    data: XOR<ProductsLikesUpdateManyMutationInput, ProductsLikesUncheckedUpdateManyWithoutProductsLikesInput>
  }

  export type ProductsCreateWithoutProductsLikesInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
    categories: CategoriesCreateNestedOneWithoutProductsInput
    ProductsImages?: ProductsImagesCreateNestedManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateWithoutProductsLikesInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string | null
    ProductsImages?: ProductsImagesUncheckedCreateNestedManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUncheckedCreateNestedManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedCreateNestedOneWithoutProductsInput
  }

  export type ProductsCreateOrConnectWithoutProductsLikesInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutProductsLikesInput, ProductsUncheckedCreateWithoutProductsLikesInput>
  }

  export type UsersCreateWithoutProductsLikesInput = {
    email: string
    password: string
    username?: string | null
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string | null
  }

  export type UsersUncheckedCreateWithoutProductsLikesInput = {
    id?: number
    email: string
    password: string
    username?: string | null
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string | null
  }

  export type UsersCreateOrConnectWithoutProductsLikesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutProductsLikesInput, UsersUncheckedCreateWithoutProductsLikesInput>
  }

  export type ProductsUpsertWithoutProductsLikesInput = {
    update: XOR<ProductsUpdateWithoutProductsLikesInput, ProductsUncheckedUpdateWithoutProductsLikesInput>
    create: XOR<ProductsCreateWithoutProductsLikesInput, ProductsUncheckedCreateWithoutProductsLikesInput>
  }

  export type ProductsUpdateWithoutProductsLikesInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categories?: CategoriesUpdateOneRequiredWithoutProductsInput
    ProductsImages?: ProductsImagesUpdateManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUpdateOneWithoutProductsInput
  }

  export type ProductsUncheckedUpdateWithoutProductsLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsImages?: ProductsImagesUncheckedUpdateManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUncheckedUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedUpdateOneWithoutProductsInput
  }

  export type UsersUpsertWithoutProductsLikesInput = {
    update: XOR<UsersUpdateWithoutProductsLikesInput, UsersUncheckedUpdateWithoutProductsLikesInput>
    create: XOR<UsersCreateWithoutProductsLikesInput, UsersUncheckedCreateWithoutProductsLikesInput>
  }

  export type UsersUpdateWithoutProductsLikesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateWithoutProductsLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsCreateManyCategoriesInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    created_at?: Date | string | null
  }

  export type ProductsUpdateWithoutCategoriesInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsImages?: ProductsImagesUpdateManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUpdateOneWithoutProductsInput
  }

  export type ProductsUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ProductsImages?: ProductsImagesUncheckedUpdateManyWithoutProductsInput
    ProductsAllergies?: ProductsAllergiesUncheckedUpdateManyWithoutProductsInput
    ProductsLikes?: ProductsLikesUncheckedUpdateManyWithoutProductsInput
    Nutritions?: NutritionsUncheckedUpdateOneWithoutProductsInput
  }

  export type ProductsUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsImagesCreateManyProductsInput = {
    id?: number
    image_url: string
    created_at?: Date | string | null
  }

  export type ProductsAllergiesCreateManyProductsInput = {
    id?: number
    allergy_id: number
    created_at?: Date | string | null
  }

  export type ProductsLikesCreateManyProductsInput = {
    id?: number
    user_id: number
    created_at?: Date | string | null
  }

  export type ProductsImagesUpdateWithoutProductsInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsImagesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsImagesUncheckedUpdateManyWithoutProductsImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsAllergiesUpdateWithoutProductsInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergies?: AllergiesUpdateOneRequiredWithoutProductsAllergiesInput
  }

  export type ProductsAllergiesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsAllergiesUncheckedUpdateManyWithoutProductsAllergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsLikesUpdateWithoutProductsInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UsersUpdateOneRequiredWithoutProductsLikesInput
  }

  export type ProductsLikesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsLikesUncheckedUpdateManyWithoutProductsLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsAllergiesCreateManyAllergiesInput = {
    id?: number
    product_id: number
    created_at?: Date | string | null
  }

  export type ProductsAllergiesUpdateWithoutAllergiesInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: ProductsUpdateOneRequiredWithoutProductsAllergiesInput
  }

  export type ProductsAllergiesUncheckedUpdateWithoutAllergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductsLikesCreateManyUsersInput = {
    id?: number
    product_id: number
    created_at?: Date | string | null
  }

  export type ProductsLikesUpdateWithoutUsersInput = {
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    products?: ProductsUpdateOneRequiredWithoutProductsLikesInput
  }

  export type ProductsLikesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}